{"paragraphs":[{"text":"%md\n\n# Web Server Log Analysis with Apache Spark\n\n#### Please Note: This Zeppelin notebook was ported from Jupyter notebook that was part of an EDX online course created by UC Berkeley and sponsored by Databricks:\n\n##### Link to EDX Course: Introduction to Apache Spark\n<https://www.edx.org/course/introduction-apache-spark-uc-berkeleyx-cs105x>\n\n###Summary\n\nThis lab will demonstrate how easy it is to perform web server log analysis with Apache Spark.\n\nServer log analysis is an ideal use case for Spark. It's a very large, common data source and contains a rich set of information. Spark allows you to store your logs in files on disk cheaply, while still providing a quick and simple way to perform data analysis on them. This homework will show you how to use Apache Spark on real-world text-based production logs and fully harness the power of that data. Log data comes from many sources, such as web, file, and compute servers, application logs, user-generated content, and can be used for monitoring servers, improving business and customer intelligence, building recommendation systems, fraud detection, and much more.\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:12 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997751_1078347718","id":"20160721-205608_398995935","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Web Server Log Analysis with Apache Spark</h1>\n<h4>Please Note: This Zeppelin notebook was ported from Jupyter notebook that was part of an EDX online course created by UC Berkeley and sponsored by Databricks:</h4>\n<h5>Link to EDX Course: Introduction to Apache Spark</h5>\n<p><a href=\"https://www.edx.org/course/introduction-apache-spark-uc-berkeleyx-cs105x\">https://www.edx.org/course/introduction-apache-spark-uc-berkeleyx-cs105x</a></p>\n<h3>Summary</h3>\n<p>This lab will demonstrate how easy it is to perform web server log analysis with Apache Spark.</p>\n<p>Server log analysis is an ideal use case for Spark. It's a very large, common data source and contains a rich set of information. Spark allows you to store your logs in files on disk cheaply, while still providing a quick and simple way to perform data analysis on them. This homework will show you how to use Apache Spark on real-world text-based production logs and fully harness the power of that data. Log data comes from many sources, such as web, file, and compute servers, application logs, user-generated content, and can be used for monitoring servers, improving business and customer intelligence, building recommendation systems, fraud detection, and much more.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:13 PM","dateFinished":"Sep 14, 2016 10:25:14 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:270"},{"text":"%md\n\n## How to complete this lab\n\nThis lab is broken up into sections with bite-sized examples for demonstrating Spark functionality for log processing.\n\nIt consists of 5 parts:\n\n* Part 1: Introduction and Imports\n* Part 2: Exploratory Data Analysis\n* Part 3: Analysis Walk-Through on the Web Server Log File\n* Part 4: Analyzing Web Server Log File\n* Part 5: Exploring 404 Response Codes","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:13 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997752_1076423974","id":"20160721-205649_1921894344","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>How to complete this lab</h2>\n<p>This lab is broken up into sections with bite-sized examples for demonstrating Spark functionality for log processing.</p>\n<p>It consists of 5 parts:</p>\n<ul>\n<li>Part 1: Introduction and Imports</li>\n<li>Part 2: Exploratory Data Analysis</li>\n<li>Part 3: Analysis Walk-Through on the Web Server Log File</li>\n<li>Part 4: Analyzing Web Server Log File</li>\n<li>Part 5: Exploring 404 Response Codes</li>\n</ul>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:14 PM","dateFinished":"Sep 14, 2016 10:25:14 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:271"},{"text":"%md\n\n## Part 1: Library Imports\n\nWe can import standard Python libraries (modules) the usual way. An import statement will import the specified module. In this lab, we will provide any imports that are necessary.\nLet's import some of the libraries we'll need:\n\n* datetime: Date and time functions\n* re: The regular expression library","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:13 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997752_1076423974","id":"20160721-210321_1736487949","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Part 1: Library Imports</h2>\n<p>We can import standard Python libraries (modules) the usual way. An import statement will import the specified module. In this lab, we will provide any imports that are necessary.\n<br  />Let's import some of the libraries we'll need:</p>\n<ul>\n<li>datetime: Date and time functions</li>\n<li>re: The regular expression library</li>\n</ul>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:14 PM","dateFinished":"Sep 14, 2016 10:25:14 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:272"},{"text":"%sh\n\nwget -O apache.access.log.PROJECT.gz https://www.dropbox.com/s/n13homy2ssyd1n2/apache.access.log.PROJECT.gz?dl=0\n\nrm -f apache.access.log.PROJECT\ngunzip apache.access.log.PROJECT.gz","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:13 PM","config":{"colWidth":12,"editorMode":"ace/mode/sh","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997752_1076423974","id":"20160725-204705_200637156","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:14 PM","dateFinished":"Sep 14, 2016 10:25:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:273"},{"text":"%sh\n\nhdfs dfs -rm -f -skipTrash /tmp/apache.access.log.PROJECT\nhdfs dfs -put apache.access.log.PROJECT /tmp\nhdfs dfs -ls /tmp/apache.access.log.PROJECT\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:14 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997752_1076423974","id":"20160721-202134_1390334492","result":{"code":"SUCCESS","type":"TEXT","msg":"Deleted /tmp/apache.access.log.PROJECT\n-rw-r--r--   3 zeppelin hdfs  111503503 2016-09-14 22:25 /tmp/apache.access.log.PROJECT\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:14 PM","dateFinished":"Sep 14, 2016 10:25:23 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:274"},{"text":"%spark\n\nsc\nsqlContext","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:14 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997752_1076423974","id":"20160724-010528_127523330","result":{"code":"SUCCESS","type":"TEXT","msg":"res0: org.apache.spark.SparkContext = org.apache.spark.SparkContext@5a04c247\nres1: org.apache.spark.sql.SQLContext = org.apache.spark.sql.hive.HiveContext@4c6780f\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:15 PM","dateFinished":"Sep 14, 2016 10:25:46 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:275"},{"text":"%pyspark\nimport datetime\n\n# Quick test of the datetime library\nprint 'This was last run on: {0}'.format(datetime.datetime.now())","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:15 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997752_1076423974","id":"20160718-191223_2111119137","result":{"code":"SUCCESS","type":"TEXT","msg":"This was last run on: 2016-09-14 22:25:45.738590\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:16 PM","dateFinished":"Sep 14, 2016 10:25:45 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:276"},{"text":"%pyspark\n# Quick test of regexp library\nimport re\n\n# Quick test of the regular expression library\nm = re.search('(?<=abc)def', 'abcdef')\n\nprint m.group(0)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:15 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997752_1076423974","id":"20160718-190935_95514384","result":{"code":"SUCCESS","type":"TEXT","msg":"def\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:17 PM","dateFinished":"Sep 14, 2016 10:25:45 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:277"},{"text":"%md\n\n## Part 2: Exploratory Data Analysis\n\nLet's begin looking at our data. For this lab, we will use a data set from NASA Kennedy Space Center web server in Florida. The full data set is freely available at <http://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html>, and it contains all HTTP requests for two months. We are using a subset that only contains several days' worth of requests. The log file has already been downloaded for you.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:16 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997753_1076039225","id":"20160721-210530_1635089066","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Part 2: Exploratory Data Analysis</h2>\n<p>Let's begin looking at our data. For this lab, we will use a data set from NASA Kennedy Space Center web server in Florida. The full data set is freely available at <a href=\"http://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html\">http://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html</a>, and it contains all HTTP requests for two months. We are using a subset that only contains several days' worth of requests. The log file has already been downloaded for you.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:16 PM","dateFinished":"Sep 14, 2016 10:25:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:278"},{"text":"%md\n\n### (2a) Loading the log file\n\nNow that we have the path to the file, let's load it into a DataFrame. We'll do this in steps. First, we'll use sqlContext.read.text() to read the text file. This will produce a DataFrame with a single string column called value.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:16 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997753_1076039225","id":"20160721-210741_1305148056","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(2a) Loading the log file</h3>\n<p>Now that we have the path to the file, let's load it into a DataFrame. We'll do this in steps. First, we'll use sqlContext.read.text() to read the text file. This will produce a DataFrame with a single string column called value.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:17 PM","dateFinished":"Sep 14, 2016 10:25:18 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:279"},{"text":"%pyspark\n\n# Specify path to downloaded log file\nimport sys\nimport os\n\nlog_file_path = 'hdfs:///' + os.path.join('tmp', 'apache.access.log.PROJECT')\n\nprint log_file_path\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:17 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997753_1076039225","id":"20160718-191015_2140118453","result":{"code":"SUCCESS","type":"TEXT","msg":"hdfs:///tmp/apache.access.log.PROJECT\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:46 PM","dateFinished":"Sep 14, 2016 10:25:47 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:280"},{"text":"%pyspark\n\nbase_df =  sqlContext.read.text(log_file_path)\n# Let's look at the schema\nbase_df.printSchema()\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:18 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997753_1076039225","id":"20160718-195018_1400250065","result":{"code":"SUCCESS","type":"TEXT","msg":"root\n |-- value: string (nullable = true)\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:47 PM","dateFinished":"Sep 14, 2016 10:25:48 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:281"},{"text":"%md\n\nLet's take a look at some of the data","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:18 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997753_1076039225","id":"20160721-210826_262995281","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Let's take a look at some of the data</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:19 PM","dateFinished":"Sep 14, 2016 10:25:19 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:282"},{"text":"%pyspark\n\nbase_df.show(truncate=False)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:19 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997753_1076039225","id":"20160718-195215_169877856","result":{"code":"SUCCESS","type":"TEXT","msg":"+-------------------------------------------------------------------------------------------------------------------------------+\n|value                                                                                                                          |\n+-------------------------------------------------------------------------------------------------------------------------------+\n|in24.inetnebr.com - - [01/Aug/1995:00:00:01 -0400] \"GET /shuttle/missions/sts-68/news/sts-68-mcc-05.txt HTTP/1.0\" 200 1839     |\n|uplherc.upl.com - - [01/Aug/1995:00:00:07 -0400] \"GET / HTTP/1.0\" 304 0                                                        |\n|uplherc.upl.com - - [01/Aug/1995:00:00:08 -0400] \"GET /images/ksclogo-medium.gif HTTP/1.0\" 304 0                               |\n|uplherc.upl.com - - [01/Aug/1995:00:00:08 -0400] \"GET /images/MOSAIC-logosmall.gif HTTP/1.0\" 304 0                             |\n|uplherc.upl.com - - [01/Aug/1995:00:00:08 -0400] \"GET /images/USA-logosmall.gif HTTP/1.0\" 304 0                                |\n|ix-esc-ca2-07.ix.netcom.com - - [01/Aug/1995:00:00:09 -0400] \"GET /images/launch-logo.gif HTTP/1.0\" 200 1713                   |\n|uplherc.upl.com - - [01/Aug/1995:00:00:10 -0400] \"GET /images/WORLD-logosmall.gif HTTP/1.0\" 304 0                              |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:10 -0400] \"GET /history/skylab/skylab.html HTTP/1.0\" 200 1687                      |\n|piweba4y.prodigy.com - - [01/Aug/1995:00:00:10 -0400] \"GET /images/launchmedium.gif HTTP/1.0\" 200 11853                        |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:11 -0400] \"GET /history/skylab/skylab-small.gif HTTP/1.0\" 200 9202                 |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:12 -0400] \"GET /images/ksclogosmall.gif HTTP/1.0\" 200 3635                         |\n|ix-esc-ca2-07.ix.netcom.com - - [01/Aug/1995:00:00:12 -0400] \"GET /history/apollo/images/apollo-logo1.gif HTTP/1.0\" 200 1173   |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:13 -0400] \"GET /history/apollo/images/apollo-logo.gif HTTP/1.0\" 200 3047           |\n|uplherc.upl.com - - [01/Aug/1995:00:00:14 -0400] \"GET /images/NASA-logosmall.gif HTTP/1.0\" 304 0                               |\n|133.43.96.45 - - [01/Aug/1995:00:00:16 -0400] \"GET /shuttle/missions/sts-69/mission-sts-69.html HTTP/1.0\" 200 10566            |\n|kgtyk4.kj.yamagata-u.ac.jp - - [01/Aug/1995:00:00:17 -0400] \"GET / HTTP/1.0\" 200 7280                                          |\n|kgtyk4.kj.yamagata-u.ac.jp - - [01/Aug/1995:00:00:18 -0400] \"GET /images/ksclogo-medium.gif HTTP/1.0\" 200 5866                 |\n|d0ucr6.fnal.gov - - [01/Aug/1995:00:00:19 -0400] \"GET /history/apollo/apollo-16/apollo-16.html HTTP/1.0\" 200 2743              |\n|ix-esc-ca2-07.ix.netcom.com - - [01/Aug/1995:00:00:19 -0400] \"GET /shuttle/resources/orbiters/discovery.html HTTP/1.0\" 200 6849|\n|d0ucr6.fnal.gov - - [01/Aug/1995:00:00:20 -0400] \"GET /history/apollo/apollo-16/apollo-16-patch-small.gif HTTP/1.0\" 200 14897  |\n+-------------------------------------------------------------------------------------------------------------------------------+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:47 PM","dateFinished":"Sep 14, 2016 10:25:50 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:283"},{"text":"%md\n\n### (2b) Parsing the log file","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:19 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997753_1076039225","id":"20160721-212802_988981671","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(2b) Parsing the log file</h3>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:20 PM","dateFinished":"Sep 14, 2016 10:25:20 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284"},{"text":"%md\n\nIf you're familiar with web servers at all, you'll recognize that this is in\n[Common Log Format](https://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-format). \n\nThe fields are:\n\nremotehost, rfc931, authuser, [date], \"request\", status, bytes\n\n\n    | field       | meaning                                                                |\n    |-------------|------------------------------------------------------------------------|\n    | remotehost  | Remote hostname (or IP number if DNS hostname is not available).       |\n    | rfc931      | The remote logname of the user. We don't really care about this field. |\n    | authuser    | The username of the remote user, as authenticated by the HTTP server.  |\n    | [date]      | The date and time of the request.                                      |\n    | \"request\"   | The request, exactly as it came from the browser or client.            |\n    | status      | The HTTP status code the server sent back to the client.               |\n    | bytes       | The number of bytes (`Content-Length`) transferred to the client.      |\n\n\n\nNext, we have to parse it into individual columns. We'll use the special built-in [regexp\\_extract()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.functions.regexp_extract)\nfunction to do the parsing. This function matches a column against a regular expression with one or more [capture groups](http://regexone.com/lesson/capturing_groups) and allows you to extract one of the matched groups. We'll use one regular expression for each field we wish to extract.\n\nIf you can't read these regular expressions, don't worry. Trust us: They work. If you find regular expressions confusing (and they certainly _can_ be), and you want to learn more about them, start with the\n[RegexOne web site](http://regexone.com/). You might also find [_Regular Expressions Cookbook_](http://shop.oreilly.com/product/0636920023630.do), by Jan Goyvaerts and Steven Levithan, to be helpful.\n\n_Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems._ (attributed to Jamie Zawinski)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:20 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997754_1077193472","id":"20160721-210934_867340648","result":{"code":"SUCCESS","type":"HTML","msg":"<p>If you're familiar with web servers at all, you'll recognize that this is in\n<br  /><a href=\"https://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-format\">Common Log Format</a>.</p>\n<p>The fields are:</p>\n<p>remotehost, rfc931, authuser, [date], &ldquo;request&rdquo;, status, bytes</p>\n<pre><code>| field       | meaning                                                                |\n|-------------|------------------------------------------------------------------------|\n| remotehost  | Remote hostname (or IP number if DNS hostname is not available).       |\n| rfc931      | The remote logname of the user. We don't really care about this field. |\n| authuser    | The username of the remote user, as authenticated by the HTTP server.  |\n| [date]      | The date and time of the request.                                      |\n| \"request\"   | The request, exactly as it came from the browser or client.            |\n| status      | The HTTP status code the server sent back to the client.               |\n| bytes       | The number of bytes (`Content-Length`) transferred to the client.      |\n</code></pre>\n<p>Next, we have to parse it into individual columns. We'll use the special built-in <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.functions.regexp_extract\">regexp_extract()</a>\n<br  />function to do the parsing. This function matches a column against a regular expression with one or more <a href=\"http://regexone.com/lesson/capturing_groups\">capture groups</a> and allows you to extract one of the matched groups. We'll use one regular expression for each field we wish to extract.</p>\n<p>If you can't read these regular expressions, don't worry. Trust us: They work. If you find regular expressions confusing (and they certainly <em>can</em> be), and you want to learn more about them, start with the\n<br  /><a href=\"http://regexone.com/\">RegexOne web site</a>. You might also find <a href=\"http://shop.oreilly.com/product/0636920023630.do\"><em>Regular Expressions Cookbook</em></a>, by Jan Goyvaerts and Steven Levithan, to be helpful.</p>\n<p><em>Some people, when confronted with a problem, think &ldquo;I know, I'll use regular expressions.&rdquo; Now they have two problems.</em> (attributed to Jamie Zawinski)</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:20 PM","dateFinished":"Sep 14, 2016 10:25:20 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:285"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import split, regexp_extract\nsplit_df = base_df.select(regexp_extract('value', r'^([^\\s]+\\s)', 1).alias('host'),\n                          regexp_extract('value', r'^.*\\[(\\d\\d/\\w{3}/\\d{4}:\\d{2}:\\d{2}:\\d{2} -\\d{4})]', 1).alias('timestamp'),\n                          regexp_extract('value', r'^.*\"\\w+\\s+([^\\s]+)\\s+HTTP.*\"', 1).alias('path'),\n                          regexp_extract('value', r'^.*\"\\s+([^\\s]+)', 1).cast('integer').alias('status'),\n                          regexp_extract('value', r'^.*\\s+(\\d+)$', 1).cast('integer').alias('content_size'))\nsplit_df.show(truncate=False)\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:20 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997754_1077193472","id":"20160718-195552_1528005254","result":{"code":"SUCCESS","type":"TEXT","msg":"+----------------------------+--------------------------+---------------------------------------------------+------+------------+\n|host                        |timestamp                 |path                                               |status|content_size|\n+----------------------------+--------------------------+---------------------------------------------------+------+------------+\n|in24.inetnebr.com           |01/Aug/1995:00:00:01 -0400|/shuttle/missions/sts-68/news/sts-68-mcc-05.txt    |200   |1839        |\n|uplherc.upl.com             |01/Aug/1995:00:00:07 -0400|/                                                  |304   |0           |\n|uplherc.upl.com             |01/Aug/1995:00:00:08 -0400|/images/ksclogo-medium.gif                         |304   |0           |\n|uplherc.upl.com             |01/Aug/1995:00:00:08 -0400|/images/MOSAIC-logosmall.gif                       |304   |0           |\n|uplherc.upl.com             |01/Aug/1995:00:00:08 -0400|/images/USA-logosmall.gif                          |304   |0           |\n|ix-esc-ca2-07.ix.netcom.com |01/Aug/1995:00:00:09 -0400|/images/launch-logo.gif                            |200   |1713        |\n|uplherc.upl.com             |01/Aug/1995:00:00:10 -0400|/images/WORLD-logosmall.gif                        |304   |0           |\n|slppp6.intermind.net        |01/Aug/1995:00:00:10 -0400|/history/skylab/skylab.html                        |200   |1687        |\n|piweba4y.prodigy.com        |01/Aug/1995:00:00:10 -0400|/images/launchmedium.gif                           |200   |11853       |\n|slppp6.intermind.net        |01/Aug/1995:00:00:11 -0400|/history/skylab/skylab-small.gif                   |200   |9202        |\n|slppp6.intermind.net        |01/Aug/1995:00:00:12 -0400|/images/ksclogosmall.gif                           |200   |3635        |\n|ix-esc-ca2-07.ix.netcom.com |01/Aug/1995:00:00:12 -0400|/history/apollo/images/apollo-logo1.gif            |200   |1173        |\n|slppp6.intermind.net        |01/Aug/1995:00:00:13 -0400|/history/apollo/images/apollo-logo.gif             |200   |3047        |\n|uplherc.upl.com             |01/Aug/1995:00:00:14 -0400|/images/NASA-logosmall.gif                         |304   |0           |\n|133.43.96.45                |01/Aug/1995:00:00:16 -0400|/shuttle/missions/sts-69/mission-sts-69.html       |200   |10566       |\n|kgtyk4.kj.yamagata-u.ac.jp  |01/Aug/1995:00:00:17 -0400|/                                                  |200   |7280        |\n|kgtyk4.kj.yamagata-u.ac.jp  |01/Aug/1995:00:00:18 -0400|/images/ksclogo-medium.gif                         |200   |5866        |\n|d0ucr6.fnal.gov             |01/Aug/1995:00:00:19 -0400|/history/apollo/apollo-16/apollo-16.html           |200   |2743        |\n|ix-esc-ca2-07.ix.netcom.com |01/Aug/1995:00:00:19 -0400|/shuttle/resources/orbiters/discovery.html         |200   |6849        |\n|d0ucr6.fnal.gov             |01/Aug/1995:00:00:20 -0400|/history/apollo/apollo-16/apollo-16-patch-small.gif|200   |14897       |\n+----------------------------+--------------------------+---------------------------------------------------+------+------------+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:47 PM","dateFinished":"Sep 14, 2016 10:25:53 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:286"},{"text":"%md\n\n### (2c) Data Cleaning\n\nLet's see how well our parsing logic worked. First, let's verify that there are no null rows in the original data set.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:21 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997754_1077193472","id":"20160721-212703_1932014155","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(2c) Data Cleaning</h3>\n<p>Let's see how well our parsing logic worked. First, let's verify that there are no null rows in the original data set.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:21 PM","dateFinished":"Sep 14, 2016 10:25:21 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:287"},{"text":"%pyspark\n\nprint base_df.filter(base_df['value'].isNull()).count()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:21 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997754_1077193472","id":"20160718-200153_1865911463","result":{"code":"SUCCESS","type":"TEXT","msg":"0\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:51 PM","dateFinished":"Sep 14, 2016 10:25:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:288"},{"text":"%md\n\nIf our parsing worked properly, we'll have no rows with null column values. Let's check.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:22 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997754_1077193472","id":"20160721-212848_1283299327","result":{"code":"SUCCESS","type":"HTML","msg":"<p>If our parsing worked properly, we'll have no rows with null column values. Let's check.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:22 PM","dateFinished":"Sep 14, 2016 10:25:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:289"},{"text":"%pyspark\n\nbad_rows_df = split_df.filter(split_df['host'].isNull() |\n                              split_df['timestamp'].isNull() |\n                              split_df['path'].isNull() |\n                              split_df['status'].isNull() |\n                             split_df['content_size'].isNull())\n\nprint bad_rows_df.count()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:22 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160718-200217_1205719967","result":{"code":"SUCCESS","type":"TEXT","msg":"8756\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:54 PM","dateFinished":"Sep 14, 2016 10:26:09 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:290"},{"text":"%md\n\nNot perfect. We have some null values. We have more cleaning to do. Which columns are affected?","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:22 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160721-212919_864646186","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Not perfect. We have some null values. We have more cleaning to do. Which columns are affected?</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:23 PM","dateFinished":"Sep 14, 2016 10:25:23 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:291"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import col, sum\n\ndef count_null(col_name):\n  return sum(col(col_name).isNull().cast('integer')).alias(col_name)\n\n# Build up a list of column expressions, one per colum","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:23 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160718-200250_1860290921","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:57 PM","dateFinished":"Sep 14, 2016 10:26:09 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:292"},{"text":"%pyspark\n\nexprs = []\nfor col_name in split_df.columns:\n  exprs.append(count_null(col_name))\n  \nprint exprs\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:23 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160718-200341_292449305","result":{"code":"SUCCESS","type":"TEXT","msg":"[Column<(sum(cast(isnull(host) as int)),mode=Complete,isDistinct=false) AS host#14>, Column<(sum(cast(isnull(timestamp) as int)),mode=Complete,isDistinct=false) AS timestamp#15>, Column<(sum(cast(isnull(path) as int)),mode=Complete,isDistinct=false) AS path#16>, Column<(sum(cast(isnull(status) as int)),mode=Complete,isDistinct=false) AS status#17>, Column<(sum(cast(isnull(content_size) as int)),mode=Complete,isDistinct=false) AS content_size#18>]\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:09 PM","dateFinished":"Sep 14, 2016 10:26:09 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:293"},{"text":"%pyspark\n\nsplit_df.agg(*exprs).show()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:23 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160718-200402_1743180176","result":{"code":"SUCCESS","type":"TEXT","msg":"+----+---------+----+------+------------+\n|host|timestamp|path|status|content_size|\n+----+---------+----+------+------------+\n|   0|        0|   0|     0|        8756|\n+----+---------+----+------+------------+\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:09 PM","dateFinished":"Sep 14, 2016 10:26:18 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:294"},{"text":"%md\n\nOkay, they're all in the `content_size` column. Let's see if we can figure out what's wrong. Our original parsing regular expression for that column was:\n\n```\nregexp_extract('value', r'^.*\\s+(\\d+)$', 1).cast('integer').alias('content_size')\n```\n\nThe `\\d+` selects one or more digits at the end of the input line. Is it possible there are lines without a valid content size? Or is there something wrong with our regular expression? Let's see if there are any lines that do not end with one or more digits.\n\n**Note**: In the expression below, `~` means \"not\".","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:24 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160721-213021_496415433","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Okay, they're all in the <code>content_size</code> column. Let's see if we can figure out what's wrong. Our original parsing regular expression for that column was:</p>\n<pre><code>regexp_extract('value', r'^.*\\s+(\\d+)$', 1).cast('integer').alias('content_size')\n</code></pre>\n<p>The <code>\\d+</code> selects one or more digits at the end of the input line. Is it possible there are lines without a valid content size? Or is there something wrong with our regular expression? Let's see if there are any lines that do not end with one or more digits.</p>\n<p><strong>Note</strong>: In the expression below, <code>~</code> means &ldquo;not&rdquo;.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:24 PM","dateFinished":"Sep 14, 2016 10:25:24 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:295"},{"text":"%pyspark\n\nbad_content_size_df = base_df.filter(~ base_df['value'].rlike(r'\\d+$'))\n\nprint bad_content_size_df.count()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:24 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160718-200415_1670913707","result":{"code":"SUCCESS","type":"TEXT","msg":"8756\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:10 PM","dateFinished":"Sep 14, 2016 10:26:21 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:296"},{"text":"%md\n\nThat's it! The count matches the number of rows in `bad_rows_df` exactly.\n\nLet's take a look at some of the bad column values. Since it's possible that the rows end in extra white space, we'll tack a marker character onto the end of each line, to make it easier to see trailing white space.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:24 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160721-213051_622513747","result":{"code":"SUCCESS","type":"HTML","msg":"<p>That's it! The count matches the number of rows in <code>bad_rows_df</code> exactly.</p>\n<p>Let's take a look at some of the bad column values. Since it's possible that the rows end in extra white space, we'll tack a marker character onto the end of each line, to make it easier to see trailing white space.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:26 PM","dateFinished":"Sep 14, 2016 10:25:26 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:297"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import lit, concat\n\nbad_content_size_df.select(concat(bad_content_size_df['value'], lit('$'))).show(truncate=False)\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:26 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160718-200445_212592333","result":{"code":"SUCCESS","type":"TEXT","msg":"+----------------------------------------------------------------------------------------------------------------------------+\n|concat(value,$)                                                                                                             |\n+----------------------------------------------------------------------------------------------------------------------------+\n|gw1.att.com - - [01/Aug/1995:00:03:53 -0400] \"GET /shuttle/missions/sts-73/news HTTP/1.0\" 302 -$                            |\n|js002.cc.utsunomiya-u.ac.jp - - [01/Aug/1995:00:07:33 -0400] \"GET /shuttle/resources/orbiters/discovery.gif HTTP/1.0\" 404 -$|\n|tia1.eskimo.com - - [01/Aug/1995:00:28:41 -0400] \"GET /pub/winvn/release.txt HTTP/1.0\" 404 -$                               |\n|itws.info.eng.niigata-u.ac.jp - - [01/Aug/1995:00:38:01 -0400] \"GET /ksc.html/facts/about_ksc.html HTTP/1.0\" 403 -$         |\n|grimnet23.idirect.com - - [01/Aug/1995:00:50:12 -0400] \"GET /www/software/winvn/winvn.html HTTP/1.0\" 404 -$                 |\n|miriworld.its.unimelb.edu.au - - [01/Aug/1995:01:04:54 -0400] \"GET /history/history.htm HTTP/1.0\" 404 -$                    |\n|ras38.srv.net - - [01/Aug/1995:01:05:14 -0400] \"GET /elv/DELTA/uncons.htm HTTP/1.0\" 404 -$                                  |\n|cs1-06.leh.ptd.net - - [01/Aug/1995:01:17:38 -0400] \"GET /sts-71/launch/\" 404 -$                                            |\n|www-b2.proxy.aol.com - - [01/Aug/1995:01:22:07 -0400] \"GET /shuttle/countdown HTTP/1.0\" 302 -$                              |\n|maui56.maui.net - - [01/Aug/1995:01:31:56 -0400] \"GET /shuttle HTTP/1.0\" 302 -$                                             |\n|dialip-24.athenet.net - - [01/Aug/1995:01:33:02 -0400] \"GET /history/apollo/apollo-13.html HTTP/1.0\" 404 -$                 |\n|h96-158.ccnet.com - - [01/Aug/1995:01:35:50 -0400] \"GET /history/apollo/a-001/a-001-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:23 -0400] \"GET /history/apollo/a-001/movies/ HTTP/1.0\" 404 -$                      |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:30 -0400] \"GET /history/apollo/a-001/a-001-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:38 -0400] \"GET /history/apollo/a-001/movies/ HTTP/1.0\" 404 -$                      |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:42 -0400] \"GET /history/apollo/a-001/a-001-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:44 -0400] \"GET /history/apollo/a-001/images/ HTTP/1.0\" 404 -$                      |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:47 -0400] \"GET /history/apollo/a-001/a-001-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:37:04 -0400] \"GET /history/apollo/a-004/a-004-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:37:05 -0400] \"GET /history/apollo/a-004/movies/ HTTP/1.0\" 404 -$                      |\n+----------------------------------------------------------------------------------------------------------------------------+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:18 PM","dateFinished":"Sep 14, 2016 10:26:24 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:298"},{"text":"%md\n\n### (2d) Fix the rows with null content\\_size\n\nThe easiest solution is to replace the null values in `split_df` with 0. The DataFrame API provides a set of functions and fields specifically designed for working with null values, among them:\n\n* [fillna()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.fillna), which fills null values with specified non-null values.\n* [na](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.na), which returns a [DataFrameNaFunctions](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrameNaFunctions) object with many functions for operating on null columns.\n\nWe'll use `fillna()`, because it's simple. There are several ways to invoke this function. The easiest is just to replace _all_ null columns with known values. But, for safety, it's better to pass a Python dictionary containing (column\\_name, value) mappings. That's what we'll do.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:26 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997755_1076808723","id":"20160721-213152_1800712122","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(2d) Fix the rows with null content_size</h3>\n<p>The easiest solution is to replace the null values in <code>split_df</code> with 0. The DataFrame API provides a set of functions and fields specifically designed for working with null values, among them:</p>\n<ul>\n<li><a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.fillna\">fillna()</a>, which fills null values with specified non-null values.</li>\n<li><a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.na\">na</a>, which returns a <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrameNaFunctions\">DataFrameNaFunctions</a> object with many functions for operating on null columns.</li>\n</ul>\n<p>We'll use <code>fillna()</code>, because it's simple. There are several ways to invoke this function. The easiest is just to replace <em>all</em> null columns with known values. But, for safety, it's better to pass a Python dictionary containing (column_name, value) mappings. That's what we'll do.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:28 PM","dateFinished":"Sep 14, 2016 10:25:28 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:299"},{"text":"%pyspark\n\n# Replace all null content_size values with 0.\ncleaned_df = split_df.fillna({'content_size': 0})","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:28 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160718-200611_314088170","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:21 PM","dateFinished":"Sep 14, 2016 10:26:24 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:300"},{"text":"%pyspark\n\n# Ensure that there are no nulls left.\nexprs = []\nfor col_name in cleaned_df.columns:\n  exprs.append(count_null(col_name))\n\ncleaned_df.agg(*exprs).show()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:30 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160718-200631_2138789122","result":{"code":"SUCCESS","type":"TEXT","msg":"+----+---------+----+------+------------+\n|host|timestamp|path|status|content_size|\n+----+---------+----+------+------------+\n|   0|        0|   0|     0|           0|\n+----+---------+----+------+------------+\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:24 PM","dateFinished":"Sep 14, 2016 10:26:32 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:301"},{"text":"%md\n\n### (2e) Parsing the timestamp.\n\nOkay, now that we have a clean, parsed DataFrame, we have to parse the timestamp field into an actual timestamp. The Common Log Format time is somewhat non-standard. A User-Defined Function (UDF) is the most straightforward way to parse it.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:31 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160721-213247_360874576","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(2e) Parsing the timestamp.</h3>\n<p>Okay, now that we have a clean, parsed DataFrame, we have to parse the timestamp field into an actual timestamp. The Common Log Format time is somewhat non-standard. A User-Defined Function (UDF) is the most straightforward way to parse it.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:32 PM","dateFinished":"Sep 14, 2016 10:25:32 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:302"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import udf\n\nmonth_map = {\n  'Jan': 1, 'Feb': 2, 'Mar':3, 'Apr':4, 'May':5, 'Jun':6, 'Jul':7,\n  'Aug':8,  'Sep': 9, 'Oct':10, 'Nov': 11, 'Dec': 12\n}\n\ndef parse_clf_time(s):\n    \"\"\" Convert Common Log time format into a Python datetime object\n    Args:\n        s (str): date and time in Apache time format [dd/mmm/yyyy:hh:mm:ss (+/-)zzzz]\n    Returns:\n        a string suitable for passing to CAST('timestamp')\n    \"\"\"\n    # NOTE: We're ignoring time zone here. In a production application, you'd want to handle that.\n    return \"{0:04d}-{1:02d}-{2:02d} {3:02d}:{4:02d}:{5:02d}\".format(\n      int(s[7:11]),\n      month_map[s[3:6]],\n      int(s[0:2]),\n      int(s[12:14]),\n      int(s[15:17]),\n      int(s[18:20])\n    )\n\nu_parse_time = udf(parse_clf_time)\n\nlogs_df = cleaned_df.select('*', u_parse_time(cleaned_df['timestamp']).cast('timestamp').alias('time')).drop('timestamp')\ntotal_log_entries = logs_df.count()\n\nprint total_log_entries","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:32 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160718-200648_780067911","result":{"code":"SUCCESS","type":"TEXT","msg":"1043177\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:24 PM","dateFinished":"Sep 14, 2016 10:26:42 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:303"},{"text":"%pyspark\n\nlogs_df.printSchema()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:32 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160718-200730_1083966913","result":{"code":"SUCCESS","type":"TEXT","msg":"root\n |-- host: string (nullable = true)\n |-- path: string (nullable = true)\n |-- status: integer (nullable = true)\n |-- content_size: integer (nullable = false)\n |-- time: timestamp (nullable = true)\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:32 PM","dateFinished":"Sep 14, 2016 10:26:42 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:304"},{"text":"%pyspark\n\nlogs_df.show(truncate = False)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:34 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160718-201656_1316433772","result":{"code":"SUCCESS","type":"TEXT","msg":"+----------------------------+---------------------------------------------------+------+------------+---------------------+\n|host                        |path                                               |status|content_size|time                 |\n+----------------------------+---------------------------------------------------+------+------------+---------------------+\n|in24.inetnebr.com           |/shuttle/missions/sts-68/news/sts-68-mcc-05.txt    |200   |1839        |1995-08-01 00:00:01.0|\n|uplherc.upl.com             |/                                                  |304   |0           |1995-08-01 00:00:07.0|\n|uplherc.upl.com             |/images/ksclogo-medium.gif                         |304   |0           |1995-08-01 00:00:08.0|\n|uplherc.upl.com             |/images/MOSAIC-logosmall.gif                       |304   |0           |1995-08-01 00:00:08.0|\n|uplherc.upl.com             |/images/USA-logosmall.gif                          |304   |0           |1995-08-01 00:00:08.0|\n|ix-esc-ca2-07.ix.netcom.com |/images/launch-logo.gif                            |200   |1713        |1995-08-01 00:00:09.0|\n|uplherc.upl.com             |/images/WORLD-logosmall.gif                        |304   |0           |1995-08-01 00:00:10.0|\n|slppp6.intermind.net        |/history/skylab/skylab.html                        |200   |1687        |1995-08-01 00:00:10.0|\n|piweba4y.prodigy.com        |/images/launchmedium.gif                           |200   |11853       |1995-08-01 00:00:10.0|\n|slppp6.intermind.net        |/history/skylab/skylab-small.gif                   |200   |9202        |1995-08-01 00:00:11.0|\n|slppp6.intermind.net        |/images/ksclogosmall.gif                           |200   |3635        |1995-08-01 00:00:12.0|\n|ix-esc-ca2-07.ix.netcom.com |/history/apollo/images/apollo-logo1.gif            |200   |1173        |1995-08-01 00:00:12.0|\n|slppp6.intermind.net        |/history/apollo/images/apollo-logo.gif             |200   |3047        |1995-08-01 00:00:13.0|\n|uplherc.upl.com             |/images/NASA-logosmall.gif                         |304   |0           |1995-08-01 00:00:14.0|\n|133.43.96.45                |/shuttle/missions/sts-69/mission-sts-69.html       |200   |10566       |1995-08-01 00:00:16.0|\n|kgtyk4.kj.yamagata-u.ac.jp  |/                                                  |200   |7280        |1995-08-01 00:00:17.0|\n|kgtyk4.kj.yamagata-u.ac.jp  |/images/ksclogo-medium.gif                         |200   |5866        |1995-08-01 00:00:18.0|\n|d0ucr6.fnal.gov             |/history/apollo/apollo-16/apollo-16.html           |200   |2743        |1995-08-01 00:00:19.0|\n|ix-esc-ca2-07.ix.netcom.com |/shuttle/resources/orbiters/discovery.html         |200   |6849        |1995-08-01 00:00:19.0|\n|d0ucr6.fnal.gov             |/history/apollo/apollo-16/apollo-16-patch-small.gif|200   |14897       |1995-08-01 00:00:20.0|\n+----------------------------+---------------------------------------------------+------+------------+---------------------+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:42 PM","dateFinished":"Sep 14, 2016 10:26:43 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:305"},{"text":"%md\n\nLet's cache logs_df. We're going to be using it quite a bit from here forward.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:34 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160721-213319_1843703416","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Let's cache logs_df. We're going to be using it quite a bit from here forward.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:35 PM","dateFinished":"Sep 14, 2016 10:25:35 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:306"},{"text":"%pyspark\n\nlogs_df.cache()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:35 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160718-201706_792557368","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:43 PM","dateFinished":"Sep 14, 2016 10:26:43 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:307"},{"text":"%md\n\n## Part 3: Analysis Walk-Through on the Web Server Log File\n\nNow that we have a DataFrame containing the parsed log file as a set of Row objects, we can perform various analyses.\n\n### (3a) Example: Content Size Statistics\n\nLet's compute some statistics about the sizes of content being returned by the web server. In particular, we'd like to know what are the average, minimum, and maximum content sizes.\n\nWe can compute the statistics by calling `.describe()` on the `content_size` column of `logs_df`.  The `.describe()` function returns the count, mean, stddev, min, and max of a given column.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:35 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160721-213338_215734708","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Part 3: Analysis Walk-Through on the Web Server Log File</h2>\n<p>Now that we have a DataFrame containing the parsed log file as a set of Row objects, we can perform various analyses.</p>\n<h3>(3a) Example: Content Size Statistics</h3>\n<p>Let's compute some statistics about the sizes of content being returned by the web server. In particular, we'd like to know what are the average, minimum, and maximum content sizes.</p>\n<p>We can compute the statistics by calling <code>.describe()</code> on the <code>content_size</code> column of <code>logs_df</code>.  The <code>.describe()</code> function returns the count, mean, stddev, min, and max of a given column.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:36 PM","dateFinished":"Sep 14, 2016 10:25:36 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:308"},{"text":"%pyspark\n\n# Calculate statistics based on the content size.\ncontent_size_summary_df = logs_df.describe(['content_size'])\ncontent_size_summary_df.show()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:36 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997756_1074884978","id":"20160718-202001_878461975","result":{"code":"SUCCESS","type":"TEXT","msg":"+-------+------------------+\n|summary|      content_size|\n+-------+------------------+\n|  count|           1043177|\n|   mean|17531.555702435926|\n| stddev| 68561.99906264187|\n|    min|                 0|\n|    max|           3421948|\n+-------+------------------+\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:43 PM","dateFinished":"Sep 14, 2016 10:26:53 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:309"},{"text":"%md\n\nAlternatively, we can use SQL to directly calculate these statistics.  You can explore the many useful functions within the `pyspark.sql.functions` module in the [documentation](https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#module-pyspark.sql.functions).\n\nAfter we apply the `.agg()` function, we call `.first()` to extract the first value, which is equivalent to `.take(1)[0]`.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:37 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160721-213401_647137257","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Alternatively, we can use SQL to directly calculate these statistics.  You can explore the many useful functions within the <code>pyspark.sql.functions</code> module in the <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#module-pyspark.sql.functions\">documentation</a>.</p>\n<p>After we apply the <code>.agg()</code> function, we call <code>.first()</code> to extract the first value, which is equivalent to <code>.take(1)[0]</code>.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:37 PM","dateFinished":"Sep 14, 2016 10:25:37 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:310"},{"text":"%pyspark\n\nfrom pyspark.sql import functions as sqlFunctions\n\nstats =  (logs_df\n            .agg(sqlFunctions.min(logs_df['content_size']),\n                 sqlFunctions.avg(logs_df['content_size']),\n                 sqlFunctions.max(logs_df['content_size']))\n            .first())\n\nprint 'Using SQL functions:'\nprint 'Content Size Avg: %.02f Min: %.02f; Max: %.02f' % (stats['avg(content_size)'], stats['min(content_size)'], stats['max(content_size)'])\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:37 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160718-202032_221945837","result":{"code":"SUCCESS","type":"TEXT","msg":"Using SQL functions:\nContent Size Avg: 17531.56 Min: 0.00; Max: 3421948.00\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:44 PM","dateFinished":"Sep 14, 2016 10:26:53 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:311"},{"text":"%md\n\n### (3b) Example: HTTP Status Analysis\n\nNext, let's look at the status values that appear in the log. We want to know which status values appear in the data and how many times.  We again start with `logs_df`, then group by the `status` column, apply the `.count()` aggregation function, and sort by the `status` column.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:37 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160721-213426_1090267607","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(3b) Example: HTTP Status Analysis</h3>\n<p>Next, let's look at the status values that appear in the log. We want to know which status values appear in the data and how many times.  We again start with <code>logs_df</code>, then group by the <code>status</code> column, apply the <code>.count()</code> aggregation function, and sort by the <code>status</code> column.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:38 PM","dateFinished":"Sep 14, 2016 10:25:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:312"},{"text":"%pyspark\n\nstatus_to_count_df =(logs_df\n                     .groupBy('status')\n                     .count()\n                     .sort('status')\n                     .cache())\n\nstatus_to_count_length = status_to_count_df.count()\nprint 'Found %d response codes' % status_to_count_length\nstatus_to_count_df.show()\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:38 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160718-202106_1792027802","result":{"code":"SUCCESS","type":"TEXT","msg":"Found 7 response codes\n+------+------+\n|status| count|\n+------+------+\n|   200|940847|\n|   302| 16244|\n|   304| 79824|\n|   403|    58|\n|   404|  6185|\n|   500|     2|\n|   501|    17|\n+------+------+\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:54 PM","dateFinished":"Sep 14, 2016 10:26:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:313"},{"text":"%pyspark\n\nassert status_to_count_length == 7\nassert status_to_count_df.take(100) == [(200, 940847), (302, 16244), (304, 79824), (403, 58), (404, 6185), (500, 2), (501, 17)]\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:38 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160718-203631_1933692996","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:54 PM","dateFinished":"Sep 14, 2016 10:26:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:314"},{"text":"%md\n\n### (3c) Example: Status Graphing\n\nNow, let's visualize the results from the last example.  We can seamlessly switch over to the '%sql' interpreter to show a bar chart of the count for each response code. You can see that this is not a very effective plot.  Due to the large number of '200' codes, it is very hard to see the relative number of the others.  We can alleviate this by taking the logarithm of the count, adding that as a column to our DataFrame and displaying the result.\n\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:39 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160721-213602_558712068","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(3c) Example: Status Graphing</h3>\n<p>Now, let's visualize the results from the last example.  We can seamlessly switch over to the '%sql' interpreter to show a bar chart of the count for each response code. You can see that this is not a very effective plot.  Due to the large number of '200' codes, it is very hard to see the relative number of the others.  We can alleviate this by taking the logarithm of the count, adding that as a column to our DataFrame and displaying the result.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:39 PM","dateFinished":"Sep 14, 2016 10:25:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:315"},{"text":"%pyspark\n\nlog_status_to_count_df = status_to_count_df.withColumn('log_count', sqlFunctions.log(status_to_count_df['count']))\nlog_status_to_count_df.show()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:39 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160718-203658_1473188241","result":{"code":"SUCCESS","type":"TEXT","msg":"+------+------+------------------+\n|status| count|         log_count|\n+------+------+------------------+\n|   200|940847| 13.75453581236166|\n|   302| 16244|  9.69547888880619|\n|   304| 79824|11.287579490100818|\n|   403|    58| 4.060443010546419|\n|   404|  6185| 8.729882284826589|\n|   500|     2|0.6931471805599453|\n|   501|    17| 2.833213344056216|\n+------+------+------------------+\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:57 PM","dateFinished":"Sep 14, 2016 10:26:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:316"},{"text":"%md\n\nNext, we'll register the contents of the DataFrame as a temp table, backed by Hive metastore, so we can write sql queries against the data. \n\nAfter running the SQL 'select' cell below, choose one or more of the display options available, and then open the \"settings\" tab and drag `status` to the key entry field and drag `log_count` to the value entry field. See the diagram, below, for an example.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:39 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160722-191107_1130696257","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Next, we'll register the contents of the DataFrame as a temp table, backed by Hive metastore, so we can write sql queries against the data.</p>\n<p>After running the SQL 'select' cell below, choose one or more of the display options available, and then open the &ldquo;settings&rdquo; tab and drag <code>status</code> to the key entry field and drag <code>log_count</code> to the value entry field. See the diagram, below, for an example.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:39 PM","dateFinished":"Sep 14, 2016 10:25:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:317"},{"text":"%pyspark\n\nprint log_status_to_count_df.columns\nlog_status_to_count_df.registerTempTable(\"logstatus\")\nprint sqlContext.read.table('logstatus').dtypes","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:39 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160722-154558_417576869","result":{"code":"SUCCESS","type":"TEXT","msg":"['status', 'count', 'log_count']\n[('status', 'int'), ('count', 'bigint'), ('log_count', 'double')]\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:57 PM","dateFinished":"Sep 14, 2016 10:26:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:318"},{"text":"%sql\n\nselect status, count, log_count from logstatus","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:40 PM","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"status","index":0,"aggr":"sum"}],"values":[{"name":"log_count","index":2,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"status","index":0,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997757_1074500229","id":"20160722-154539_189658824","result":{"code":"SUCCESS","type":"TABLE","msg":"status\tcount\tlog_count\n200\t940847\t13.75453581236166\n302\t16244\t9.69547888880619\n304\t79824\t11.287579490100818\n403\t58\t4.060443010546419\n404\t6185\t8.729882284826589\n500\t2\t0.6931471805599453\n501\t17\t2.833213344056216\n","comment":"","msgTable":[[{"key":"count","value":"200"},{"key":"count","value":"940847"},{"key":"count","value":"13.75453581236166"}],[{"key":"log_count","value":"302"},{"key":"log_count","value":"16244"},{"key":"log_count","value":"9.69547888880619"}],[{"value":"304"},{"value":"79824"},{"value":"11.287579490100818"}],[{"value":"403"},{"value":"58"},{"value":"4.060443010546419"}],[{"value":"404"},{"value":"6185"},{"value":"8.729882284826589"}],[{"value":"500"},{"value":"2"},{"value":"0.6931471805599453"}],[{"value":"501"},{"value":"17"},{"value":"2.833213344056216"}]],"columnNames":[{"name":"status","index":0,"aggr":"sum"},{"name":"count","index":1,"aggr":"sum"},{"name":"log_count","index":2,"aggr":"sum"}],"rows":[["200","940847","13.75453581236166"],["302","16244","9.69547888880619"],["304","79824","11.287579490100818"],["403","58","4.060443010546419"],["404","6185","8.729882284826589"],["500","2","0.6931471805599453"],["501","17","2.833213344056216"]]},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:57 PM","dateFinished":"Sep 14, 2016 10:26:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:319"},{"text":"%md\n\n### (3d) Example: Frequent Hosts\n\nLet's look at hosts that have accessed the server frequently (e.g., more than ten times). As with the response code analysis in (3b), we create a new DataFrame by grouping `successLogsDF` by the 'host' column and aggregating by count.\n\nWe then filter the result based on the count of accesses by each host being greater than ten.  Then, we select the 'host' column and show 20 elements from the result.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:42 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160722-191832_137511351","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(3d) Example: Frequent Hosts</h3>\n<p>Let's look at hosts that have accessed the server frequently (e.g., more than ten times). As with the response code analysis in (3b), we create a new DataFrame by grouping <code>successLogsDF</code> by the 'host' column and aggregating by count.</p>\n<p>We then filter the result based on the count of accesses by each host being greater than ten.  Then, we select the 'host' column and show 20 elements from the result.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:42 PM","dateFinished":"Sep 14, 2016 10:25:42 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:320"},{"text":"%pyspark\n\n# Any hosts that has accessed the server more than 10 times.\nhost_sum_df =(logs_df\n              .groupBy('host')\n              .count())\n\nhost_more_than_10_df = (host_sum_df\n                        .filter(host_sum_df['count'] > 10)\n                        .select(host_sum_df['host']))\n\nprint 'Any 20 hosts that have accessed more then 10 times:\\n'\nhost_more_than_10_df.show(truncate=False)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:42 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160718-203737_92678960","result":{"code":"SUCCESS","type":"TEXT","msg":"Any 20 hosts that have accessed more then 10 times:\n\n+-----------------------------+\n|host                         |\n+-----------------------------+\n|gcl-s2.aero.kyushu-u.ac.jp   |\n|dd09-015.compuserve.com      |\n|sun8.hrz.th-darmstadt.de     |\n|128.159.144.47               |\n|160.151.233.33               |\n|128.159.132.13               |\n|s025n217.ummed.edu           |\n|204.126.175.80               |\n|n1043367.ksc.nasa.gov        |\n|128.159.140.124              |\n|hermes.rz.uni-duesseldorf.de |\n|csa.bu.edu                   |\n|139.169.136.137              |\n|knet.kntl.co.kr              |\n|pcmnbib03.uio.no             |\n|ppp2_100.bekkoame.or.jp      |\n|hp3.lsw.uni-heidelberg.de    |\n|163.205.105.9                |\n|netcom9.netcom.com           |\n|dd24-025.compuserve.com      |\n+-----------------------------+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:58 PM","dateFinished":"Sep 14, 2016 10:26:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:321"},{"text":"%md\n\n### (3e) Example: Visualizing Paths\n\nNow, let's visualize the number of hits to paths (URIs) in the log. To perform this task, we start with our `logs_df` and group by the `path` column, aggregate by count, and sort in descending order.\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:43 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160722-191924_1596254266","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(3e) Example: Visualizing Paths</h3>\n<p>Now, let's visualize the number of hits to paths (URIs) in the log. To perform this task, we start with our <code>logs_df</code> and group by the <code>path</code> column, aggregate by count, and sort in descending order.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:44 PM","dateFinished":"Sep 14, 2016 10:25:44 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:322"},{"text":"%pyspark\n\npaths_df = (logs_df\n            .groupBy('path')\n            .count()\n            .sort('count', ascending=False))\n\npaths_counts = (paths_df\n                .select('path', 'count')\n                .map(lambda r: (r[0], r[1]))\n                .collect())\n\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:44 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160718-211843_299092782","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:58 PM","dateFinished":"Sep 14, 2016 10:27:06 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:323"},{"text":"%md\n\nOptional: We can extract the paths and the counts, and unpack the resulting list of `Rows` using a `map` function and `lambda` expression. This would allow us to find particular paths, such as those that describe the fateful Apollo 13 mission.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:45 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160722-193401_1732241902","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Optional: We can extract the paths and the counts, and unpack the resulting list of <code>Rows</code> using a <code>map</code> function and <code>lambda</code> expression. This would allow us to find particular paths, such as those that describe the fateful Apollo 13 mission.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:45 PM","dateFinished":"Sep 14, 2016 10:25:45 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:324"},{"text":"%pyspark\n\npaths, counts = zip(*paths_counts)\n\nfor p in paths:\n    if p.startswith('/history/apollo/apollo13'):\n        print p","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:45 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160722-193156_1307759391","result":{"code":"SUCCESS","type":"TEXT","msg":"/history/apollo/apollo13/apollo-13-info.html\n/history/apollo/apollo13/apollo-13.html\n/history/apollo/apollo13/apollo13.html\n/history/apollo/apollo13\n/history/apollo/apollo13/movies/apo13home.mpg\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:59 PM","dateFinished":"Sep 14, 2016 10:27:06 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:325"},{"text":"%md\n\n### (3f) Example: Top Paths\n\nFor the final example, we'll find the top paths (URIs) in the log.  Because we sorted `paths_df` for plotting, all we need to do is call `.show()` and pass in `n=10` and `truncate=False` as the parameters to show the top ten paths without truncating.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:47 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160722-193447_577294938","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(3f) Example: Top Paths</h3>\n<p>For the final example, we'll find the top paths (URIs) in the log.  Because we sorted <code>paths_df</code> for plotting, all we need to do is call <code>.show()</code> and pass in <code>n=10</code> and <code>truncate=False</code> as the parameters to show the top ten paths without truncating.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:48 PM","dateFinished":"Sep 14, 2016 10:25:48 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:326"},{"text":"%pyspark\n\nprint 'Top Ten Paths:'\npaths_df.show(n=10, truncate=False)\n\nexpected = [\n  (u'/images/NASA-logosmall.gif', 59666),\n  (u'/images/KSC-logosmall.gif', 50420),\n  (u'/images/MOSAIC-logosmall.gif', 43831),\n  (u'/images/USA-logosmall.gif', 43604),\n  (u'/images/WORLD-logosmall.gif', 43217),\n  (u'/images/ksclogo-medium.gif', 41267),\n  (u'/ksc.html', 28536),\n  (u'/history/apollo/images/apollo-logo1.gif', 26766),\n  (u'/images/launch-logo.gif', 24742),\n  (u'/', 20173)\n]\nassert paths_df.take(10) == expected, 'incorrect Top Ten Paths'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:48 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160718-211914_242228510","result":{"code":"SUCCESS","type":"TEXT","msg":"Top Ten Paths:\n+---------------------------------------+-----+\n|path                                   |count|\n+---------------------------------------+-----+\n|/images/NASA-logosmall.gif             |59666|\n|/images/KSC-logosmall.gif              |50420|\n|/images/MOSAIC-logosmall.gif           |43831|\n|/images/USA-logosmall.gif              |43604|\n|/images/WORLD-logosmall.gif            |43217|\n|/images/ksclogo-medium.gif             |41267|\n|/ksc.html                              |28536|\n|/history/apollo/images/apollo-logo1.gif|26766|\n|/images/launch-logo.gif                |24742|\n|/                                      |20173|\n+---------------------------------------+-----+\nonly showing top 10 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:06 PM","dateFinished":"Sep 14, 2016 10:27:12 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:327"},{"text":"%md\n\n## Part 4: Analyzing Web Server Log File\n\nNow it is your turn to perform analyses on the web server log files.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:49 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160722-193742_1517160612","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Part 4: Analyzing Web Server Log File</h2>\n<p>Now it is your turn to perform analyses on the web server log files.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:49 PM","dateFinished":"Sep 14, 2016 10:25:49 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:328"},{"text":"%md\n\n**(4a) Exercise: Top Ten Error Paths**\n\nWhat are the top ten paths which did not have return code 200? Create a sorted list containing the paths and the number of times that they were accessed with a non-200 return code and show the top ten.\n\nThink about the steps that you need to perform to determine which paths did not have a 200 return code, how you will uniquely count those paths and sort the list.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:49 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997758_1075654476","id":"20160722-193809_1481595131","result":{"code":"SUCCESS","type":"HTML","msg":"<p><strong>(4a) Exercise: Top Ten Error Paths</strong></p>\n<p>What are the top ten paths which did not have return code 200? Create a sorted list containing the paths and the number of times that they were accessed with a non-200 return code and show the top ten.</p>\n<p>Think about the steps that you need to perform to determine which paths did not have a 200 return code, how you will uniquely count those paths and sort the list.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:50 PM","dateFinished":"Sep 14, 2016 10:25:50 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:329"},{"text":"%pyspark\n\n# DataFrame containing all accesses that did not return a code 200\nfrom pyspark.sql.functions import desc, log\n\nnot200DF = logs_df.filter(logs_df['status'] != 200)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:50 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160718-212016_221401993","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:06 PM","dateFinished":"Sep 14, 2016 10:27:12 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:330"},{"text":"%pyspark\n\n# Sorted DataFrame containing all paths and the number of times they were accessed with non-200 return code\nlogs_sum_df = not200DF.groupBy('path').count().sort('count', ascending=False)\n\nprint 'Top Ten failed URLs:'\nlogs_sum_df.show(10, False)\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:50 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160718-212055_410692090","result":{"code":"SUCCESS","type":"TEXT","msg":"Top Ten failed URLs:\n+---------------------------------------+-----+\n|path                                   |count|\n+---------------------------------------+-----+\n|/images/NASA-logosmall.gif             |8761 |\n|/images/KSC-logosmall.gif              |7236 |\n|/images/MOSAIC-logosmall.gif           |5197 |\n|/images/USA-logosmall.gif              |5157 |\n|/images/WORLD-logosmall.gif            |5020 |\n|/images/ksclogo-medium.gif             |4728 |\n|/history/apollo/images/apollo-logo1.gif|2907 |\n|/images/launch-logo.gif                |2811 |\n|/                                      |2199 |\n|/images/ksclogosmall.gif               |1622 |\n+---------------------------------------+-----+\nonly showing top 10 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:12 PM","dateFinished":"Sep 14, 2016 10:27:13 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:331"},{"text":"%pyspark\n\ntop_10_err_urls = [(row[0], row[1]) for row in logs_sum_df.take(10)]\ntop_10_err_expected = [\n  (u'/images/NASA-logosmall.gif', 8761),\n  (u'/images/KSC-logosmall.gif', 7236),\n  (u'/images/MOSAIC-logosmall.gif', 5197),\n  (u'/images/USA-logosmall.gif', 5157),\n  (u'/images/WORLD-logosmall.gif', 5020),\n  (u'/images/ksclogo-medium.gif', 4728),\n  (u'/history/apollo/images/apollo-logo1.gif', 2907),\n  (u'/images/launch-logo.gif', 2811),\n  (u'/', 2199),\n  (u'/images/ksclogosmall.gif', 1622)\n]\n\nassert logs_sum_df.count() == 7675, 'incorrect count for logs_sum_df'\nassert top_10_err_urls == top_10_err_expected, 'incorrect Top Ten failed URLs'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:52 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160718-212113_968538624","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:13 PM","dateFinished":"Sep 14, 2016 10:27:19 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:332"},{"text":"%md\n\n### (4b) Exercise: Number of Unique Hosts\n\nHow many unique hosts are there in the entire log?\n\nThere are multiple ways to find this.  Try to find a more optimal way than grouping by 'host'.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:53 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160722-194321_2111382895","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(4b) Exercise: Number of Unique Hosts</h3>\n<p>How many unique hosts are there in the entire log?</p>\n<p>There are multiple ways to find this.  Try to find a more optimal way than grouping by 'host'.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:53 PM","dateFinished":"Sep 14, 2016 10:25:53 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:333"},{"text":"%pyspark\n\nunique_host_count = logs_df.select('host').distinct().count()\nprint 'Unique hosts: {0}'.format(unique_host_count)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:53 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160718-212129_286712384","result":{"code":"SUCCESS","type":"TEXT","msg":"Unique hosts: 54507\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:13 PM","dateFinished":"Sep 14, 2016 10:27:20 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:334"},{"text":"%pyspark\n\nassert unique_host_count == 54507, 'incorrect unique_host_count'","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:53 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160718-212331_1613083931","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:20 PM","dateFinished":"Sep 14, 2016 10:27:20 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:335"},{"text":"%md\n\n### (4c) Exercise: Number of Unique Daily Hosts\n\nFor an advanced exercise, let's determine the number of unique hosts in the entire log on a day-by-day basis. This computation will give us counts of the number of unique daily hosts. We'd like a DataFrame sorted by increasing day of the month which includes the day of the month and the associated number of unique hosts for that day. Make sure you cache the resulting DataFrame `daily_hosts_df` so that we can reuse it in the next exercise.\n\nThink about the steps that you need to perform to count the number of different hosts that make requests *each* day.\n*Since the log only covers a single month, you can ignore the month.*  You may want to use the [`dayofmonth` function](https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.functions.dayofmonth) in the `pyspark.sql.functions` module.\n\n**Description of each variable**\n\n**`day_to_host_pair_df`**\n\nA DataFrame with two columns\n\n    | column | explanation          |\n    | ------ | -------------------- |\n    | `host` | the host name        |\n    | `day`  | the day of the month |\n\nThere will be one row in this DataFrame for each row in `logs_df`. Essentially, you're just trimming and transforming each row of `logs_df`. For example, for this row in `logs_df`:\n\n```\ngw1.att.com - - [23/Aug/1995:00:03:53 -0400] \"GET /shuttle/missions/sts-73/news HTTP/1.0\" 302 -\n```\n\nyour `day_to_host_pair_df` should have:\n\n```\ngw1.att.com 23\n```\n\n**`day_group_hosts_df`**\n\nThis DataFrame has the same columns as `day_to_host_pair_df`, but with duplicate (`day`, `host`) rows removed.\n\n**`daily_hosts_df`**\n\nA DataFrame with two columns:\n\n    | column  | explanation                                        |\n    | ------- | -------------------------------------------------- |\n    | `day`   | the day of the month                               |\n    | `count` | the number of unique requesting hosts for that day |\n    \n    ","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:55 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160722-194417_206107074","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(4c) Exercise: Number of Unique Daily Hosts</h3>\n<p>For an advanced exercise, let's determine the number of unique hosts in the entire log on a day-by-day basis. This computation will give us counts of the number of unique daily hosts. We'd like a DataFrame sorted by increasing day of the month which includes the day of the month and the associated number of unique hosts for that day. Make sure you cache the resulting DataFrame <code>daily_hosts_df</code> so that we can reuse it in the next exercise.</p>\n<p>Think about the steps that you need to perform to count the number of different hosts that make requests <em>each</em> day.\n<br  /><em>Since the log only covers a single month, you can ignore the month.</em>  You may want to use the <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.functions.dayofmonth\"><code>dayofmonth</code> function</a> in the <code>pyspark.sql.functions</code> module.</p>\n<p><strong>Description of each variable</strong></p>\n<p><strong><code>day_to_host_pair_df</code></strong></p>\n<p>A DataFrame with two columns</p>\n<pre><code>| column | explanation          |\n| ------ | -------------------- |\n| `host` | the host name        |\n| `day`  | the day of the month |\n</code></pre>\n<p>There will be one row in this DataFrame for each row in <code>logs_df</code>. Essentially, you're just trimming and transforming each row of <code>logs_df</code>. For example, for this row in <code>logs_df</code>:</p>\n<pre><code>gw1.att.com - - [23/Aug/1995:00:03:53 -0400] \"GET /shuttle/missions/sts-73/news HTTP/1.0\" 302 -\n</code></pre>\n<p>your <code>day_to_host_pair_df</code> should have:</p>\n<pre><code>gw1.att.com 23\n</code></pre>\n<p><strong><code>day_group_hosts_df</code></strong></p>\n<p>This DataFrame has the same columns as <code>day_to_host_pair_df</code>, but with duplicate (<code>day</code>, <code>host</code>) rows removed.</p>\n<p><strong><code>daily_hosts_df</code></strong></p>\n<p>A DataFrame with two columns:</p>\n<pre><code>| column  | explanation                                        |\n| ------- | -------------------------------------------------- |\n| `day`   | the day of the month                               |\n| `count` | the number of unique requesting hosts for that day |\n</code></pre>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:55 PM","dateFinished":"Sep 14, 2016 10:25:55 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:336"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import dayofmonth\n\nday_to_host_pair_df = logs_df.select('host', dayofmonth('time').alias('day'))\n\nday_group_hosts_df = day_to_host_pair_df.distinct()\n\ndaily_hosts_df = day_group_hosts_df.groupBy('day').count()\ndaily_hosts_df.cache()\n\nprint 'Unique hosts per day:'\ndaily_hosts_df.show(30, False)\n\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:55 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160718-212353_745338793","result":{"code":"SUCCESS","type":"TEXT","msg":"Unique hosts per day:\n+---+-----+\n|day|count|\n+---+-----+\n|1  |2582 |\n|3  |3222 |\n|4  |4190 |\n|5  |2502 |\n|6  |2537 |\n|7  |4106 |\n|8  |4406 |\n|9  |4317 |\n|10 |4523 |\n|11 |4346 |\n|12 |2864 |\n|13 |2650 |\n|14 |4454 |\n|15 |4214 |\n|16 |4340 |\n|17 |4385 |\n|18 |4168 |\n|19 |2550 |\n|20 |2560 |\n|21 |4134 |\n|22 |4456 |\n+---+-----+\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:21 PM","dateFinished":"Sep 14, 2016 10:27:26 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:337"},{"text":"%md\n\nLet's make sure our data matches known good values.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:56 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160723-180050_1724926025","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Let's make sure our data matches known good values.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:57 PM","dateFinished":"Sep 14, 2016 10:25:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:338"},{"text":"%pyspark\n\ndaily_hosts_list = (daily_hosts_df\n                    .map(lambda r: (r[0], r[1]))\n                    .take(30))\n                    \nassert day_to_host_pair_df.count() == total_log_entries, 'incorrect row count for day_to_host_pair_df'\nassert daily_hosts_df.count() == 21, 'incorrect daily_hosts_df.count()'\nassert daily_hosts_list == [(1, 2582), (3, 3222), (4, 4190), (5, 2502), (6, 2537), (7, 4106), (8, 4406), (9, 4317), (10, 4523), (11, 4346), (12, 2864), (13, 2650), (14, 4454), (15, 4214), (16, 4340), (17, 4385), (18, 4168), (19, 2550), (20, 2560), (21, 4134), (22, 4456)], 'incorrect daily_hosts_df'\nassert daily_hosts_df.is_cached == True, 'incorrect daily_hosts_df.is_cached'","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:57 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160718-212445_2056034580","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:21 PM","dateFinished":"Sep 14, 2016 10:27:30 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:339"},{"text":"%md\n\n### (4d) Exercise: Visualizing the Number of Unique Daily Hosts\n\nUsing the results from the previous exercise, we will use built-in graphing to plot a line graph of the unique hosts requests by day.  We need a list of days called `days_with_hosts` and a list of the number of unique hosts for each corresponding day called `hosts`.\n\n**WARNING**: Simply calling `collect()` on your transformed DataFrame won't work, because `collect()` returns a list of Spark SQL `Row` objects. You must _extract_ the appropriate column values from the `Row` objects. Hint: A loop will help.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:58 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997759_1075269727","id":"20160722-194707_1722235998","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(4d) Exercise: Visualizing the Number of Unique Daily Hosts</h3>\n<p>Using the results from the previous exercise, we will use built-in graphing to plot a line graph of the unique hosts requests by day.  We need a list of days called <code>days_with_hosts</code> and a list of the number of unique hosts for each corresponding day called <code>hosts</code>.</p>\n<p><strong>WARNING</strong>: Simply calling <code>collect()</code> on your transformed DataFrame won't work, because <code>collect()</code> returns a list of Spark SQL <code>Row</code> objects. You must <em>extract</em> the appropriate column values from the <code>Row</code> objects. Hint: A loop will help.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:25:59 PM","dateFinished":"Sep 14, 2016 10:25:59 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:340"},{"text":"%pyspark\n\ndays_with_hosts = []\nhosts = []\nfor row in daily_hosts_df.collect():\n    days_with_hosts.append(row[0])\n    hosts.append(row[1])\n\nprint (days_with_hosts)\nprint (hosts)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:59 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160718-212614_81729699","result":{"code":"SUCCESS","type":"TEXT","msg":"[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n[2582, 3222, 4190, 2502, 2537, 4106, 4406, 4317, 4523, 4346, 2864, 2650, 4454, 4214, 4340, 4385, 4168, 2550, 2560, 4134, 4456]\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:27 PM","dateFinished":"Sep 14, 2016 10:27:30 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:341"},{"text":"%pyspark\n\ntest_days = range(1, 23)\ntest_days.remove(2)\n\nassert days_with_hosts == test_days, 'incorrect days'\nassert hosts == [2582, 3222, 4190, 2502, 2537, 4106, 4406, 4317, 4523, 4346, 2864, 2650, 4454, 4214, 4340, 4385, 4168, 2550, 2560, 4134, 4456], 'incorrect hosts'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:25:59 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160718-212842_1303069643","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:30 PM","dateFinished":"Sep 14, 2016 10:27:30 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:342"},{"text":"%md\n\nNow, we can write out the `daily_hosts_df` DataFrame as a temp table; then we can write a SQL select statement to plot a line or bar graph of the unique hosts requests by day.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:00 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160722-194828_1547116231","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Now, we can write out the <code>daily_hosts_df</code> DataFrame as a temp table; then we can write a SQL select statement to plot a line or bar graph of the unique hosts requests by day.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:00 PM","dateFinished":"Sep 14, 2016 10:26:00 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:343"},{"text":"%pyspark\n\ndaily_hosts_df.registerTempTable(\"daily_hosts\")\nprint daily_hosts_df.count()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:00 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160722-195054_1947786482","result":{"code":"SUCCESS","type":"TEXT","msg":"21\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:31 PM","dateFinished":"Sep 14, 2016 10:27:31 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:344"},{"text":"%md\n\nMake sure there is a graph of daily_hosts below.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:00 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160723-180641_1565768790","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Make sure there is a graph of daily_hosts below.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:02 PM","dateFinished":"Sep 14, 2016 10:26:02 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:345"},{"text":"%sql\n\nselect day, count from daily_hosts","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:02 PM","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"day","index":0,"aggr":"sum"}],"values":[{"name":"count","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"day","index":0,"aggr":"sum"},"yAxis":{"name":"count","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160723-180450_514138223","result":{"code":"SUCCESS","type":"TABLE","msg":"day\tcount\n1\t2582\n3\t3222\n4\t4190\n5\t2502\n6\t2537\n7\t4106\n8\t4406\n9\t4317\n10\t4523\n11\t4346\n12\t2864\n13\t2650\n14\t4454\n15\t4214\n16\t4340\n17\t4385\n18\t4168\n19\t2550\n20\t2560\n21\t4134\n22\t4456\n","comment":"","msgTable":[[{"key":"count","value":"1"},{"key":"count","value":"2582"}],[{"value":"3"},{"value":"3222"}],[{"value":"4"},{"value":"4190"}],[{"value":"5"},{"value":"2502"}],[{"value":"6"},{"value":"2537"}],[{"value":"7"},{"value":"4106"}],[{"value":"8"},{"value":"4406"}],[{"value":"9"},{"value":"4317"}],[{"value":"10"},{"value":"4523"}],[{"value":"11"},{"value":"4346"}],[{"value":"12"},{"value":"2864"}],[{"value":"13"},{"value":"2650"}],[{"value":"14"},{"value":"4454"}],[{"value":"15"},{"value":"4214"}],[{"value":"16"},{"value":"4340"}],[{"value":"17"},{"value":"4385"}],[{"value":"18"},{"value":"4168"}],[{"value":"19"},{"value":"2550"}],[{"value":"20"},{"value":"2560"}],[{"value":"21"},{"value":"4134"}],[{"value":"22"},{"value":"4456"}]],"columnNames":[{"name":"day","index":0,"aggr":"sum"},{"name":"count","index":1,"aggr":"sum"}],"rows":[["1","2582"],["3","3222"],["4","4190"],["5","2502"],["6","2537"],["7","4106"],["8","4406"],["9","4317"],["10","4523"],["11","4346"],["12","2864"],["13","2650"],["14","4454"],["15","4214"],["16","4340"],["17","4385"],["18","4168"],["19","2550"],["20","2560"],["21","4134"],["22","4456"]]},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:31 PM","dateFinished":"Sep 14, 2016 10:27:31 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:346"},{"text":"%md\n\n### (4e) Exercise: Average Number of Daily Requests per Host\n\nNext, let's determine the average number of requests on a day-by-day basis.  We'd like a list by increasing day of the month and the associated average number of requests per host for that day. Make sure you cache the resulting DataFrame `avg_daily_req_per_host_df` so that we can reuse it in the next exercise.\n\nTo compute the average number of requests per host, find the total number of requests per day (across all hosts) and divide that by the number of unique hosts per day (which we found in part 4c and cached as `daily_hosts_df`).\n\n*Since the log only covers a single month, you can skip checking for the month.*","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:02 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160723-180636_1447972081","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(4e) Exercise: Average Number of Daily Requests per Host</h3>\n<p>Next, let's determine the average number of requests on a day-by-day basis.  We'd like a list by increasing day of the month and the associated average number of requests per host for that day. Make sure you cache the resulting DataFrame <code>avg_daily_req_per_host_df</code> so that we can reuse it in the next exercise.</p>\n<p>To compute the average number of requests per host, find the total number of requests per day (across all hosts) and divide that by the number of unique hosts per day (which we found in part 4c and cached as <code>daily_hosts_df</code>).</p>\n<p><em>Since the log only covers a single month, you can skip checking for the month.</em></p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:03 PM","dateFinished":"Sep 14, 2016 10:26:03 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:347"},{"text":"%pyspark\n\ntotal_req_per_day_df_temp = logs_df.select('host', dayofmonth('time').alias('day')).groupBy('day').count()\ntotal_req_per_day_df = total_req_per_day_df_temp.withColumnRenamed('count', 'reqperday')\n\ntotal_req_per_day_df.show()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:03 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160718-213039_1241367186","result":{"code":"SUCCESS","type":"TEXT","msg":"+---+---------+\n|day|reqperday|\n+---+---------+\n|  1|    33996|\n|  3|    41387|\n|  4|    59554|\n|  5|    31888|\n|  6|    32416|\n|  7|    57355|\n|  8|    60142|\n|  9|    60457|\n| 10|    61245|\n| 11|    61242|\n| 12|    38070|\n| 13|    36480|\n| 14|    59873|\n| 15|    58845|\n| 16|    56651|\n| 17|    58980|\n| 18|    56244|\n| 19|    32092|\n| 20|    32963|\n| 21|    55539|\n+---+---------+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:31 PM","dateFinished":"Sep 14, 2016 10:27:32 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:348"},{"text":"%md\n\nPlease note the `join` operator below; we want to combine `hosts per day` and `requests per day` into the same DataFrame.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:03 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160723-180829_1442987636","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Please note the <code>join</code> operator below; we want to combine <code>hosts per day</code> and <code>requests per day</code> into the same DataFrame.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:04 PM","dateFinished":"Sep 14, 2016 10:26:04 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:349"},{"text":"%pyspark\n\n# rename column\ndaily_hosts_per_day_df = daily_hosts_df.withColumnRenamed('count', 'hostperday')\n\n# perform join operation\navg_daily_req_per_host_df = (\n  total_req_per_day_df.join(daily_hosts_per_day_df, 'day', 'inner').select('day', 'hostperday', 'reqperday')\n  )\n\n# print 'Data types for data frame: %s' % avg_daily_req_per_host_df.dtypes\navg_daily_req_per_host_df.show()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:04 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997760_1159529736","id":"20160718-213054_1346319099","result":{"code":"SUCCESS","type":"TEXT","msg":"+---+----------+---------+\n|day|hostperday|reqperday|\n+---+----------+---------+\n|  1|      2582|    33996|\n|  3|      3222|    41387|\n|  4|      4190|    59554|\n|  5|      2502|    31888|\n|  6|      2537|    32416|\n|  7|      4106|    57355|\n|  8|      4406|    60142|\n|  9|      4317|    60457|\n| 10|      4523|    61245|\n| 11|      4346|    61242|\n| 12|      2864|    38070|\n| 13|      2650|    36480|\n| 14|      4454|    59873|\n| 15|      4214|    58845|\n| 16|      4340|    56651|\n| 17|      4385|    58980|\n| 18|      4168|    56244|\n| 19|      2550|    32092|\n| 20|      2560|    32963|\n| 21|      4134|    55539|\n+---+----------+---------+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:32 PM","dateFinished":"Sep 14, 2016 10:27:33 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:350"},{"text":"%pyspark\n\ndaily_req_per_host_list = (\n  avg_daily_req_per_host_df.select(\n    col('day'), col('reqperday').cast('float'), col('hostperday').cast('float')).map(\n      lambda row: (row[0], row[1] / row[2])\n  ).collect()\n)\n\nprint (daily_req_per_host_list)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:04 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160718-213133_1016933553","result":{"code":"SUCCESS","type":"TEXT","msg":"[(1, 13.166537567776917), (3, 12.845127250155183), (4, 14.213365155131266), (5, 12.745003996802557), (6, 12.777296018919984), (7, 13.968582562104238), (8, 13.650022696323196), (9, 14.00440120454019), (10, 13.540791510059695), (11, 14.091578462954441), (12, 13.292597765363128), (13, 13.766037735849057), (14, 13.442523574315222), (15, 13.964167062173706), (16, 13.053225806451612), (17, 13.450399087799315), (18, 13.494241842610364), (19, 12.585098039215687), (20, 12.876171875), (21, 13.434687953555878), (22, 12.961849192100539)]\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:32 PM","dateFinished":"Sep 14, 2016 10:27:37 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:351"},{"text":"%pyspark\n\navg_daily_req_per_host_df = sqlContext.createDataFrame(daily_req_per_host_list, ['day', 'avg_reqs_per_host_per_day'])\n\navg_daily_req_per_host_df.cache()\n\nprint 'Average number of daily requests per Hosts is:\\n'\navg_daily_req_per_host_df.show(100)\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:05 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160718-212933_1690059352","result":{"code":"SUCCESS","type":"TEXT","msg":"Average number of daily requests per Hosts is:\n\n+---+-------------------------+\n|day|avg_reqs_per_host_per_day|\n+---+-------------------------+\n|  1|       13.166537567776917|\n|  3|       12.845127250155183|\n|  4|       14.213365155131266|\n|  5|       12.745003996802557|\n|  6|       12.777296018919984|\n|  7|       13.968582562104238|\n|  8|       13.650022696323196|\n|  9|        14.00440120454019|\n| 10|       13.540791510059695|\n| 11|       14.091578462954441|\n| 12|       13.292597765363128|\n| 13|       13.766037735849057|\n| 14|       13.442523574315222|\n| 15|       13.964167062173706|\n| 16|       13.053225806451612|\n| 17|       13.450399087799315|\n| 18|       13.494241842610364|\n| 19|       12.585098039215687|\n| 20|             12.876171875|\n| 21|       13.434687953555878|\n| 22|       12.961849192100539|\n+---+-------------------------+\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:34 PM","dateFinished":"Sep 14, 2016 10:27:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:352"},{"text":"%pyspark\n\n# TEST Average number of daily requests per hosts (4e)\navg_daily_req_per_host_list = (\n  avg_daily_req_per_host_df.select('day', \n  avg_daily_req_per_host_df['avg_reqs_per_host_per_day'].cast('integer').alias('avg_requests'))\n                           .collect()\n)\n\nvalues = [(row[0], row[1]) for row in avg_daily_req_per_host_list]\nprint values\n\nassert values == [(1, 13), (3, 12), (4, 14), (5, 12), (6, 12), (7, 13), (8, 13), (9, 14), (10, 13), (11, 14), (12, 13), (13, 13), (14, 13), (15, 13), (16, 13), (17, 13), (18, 13), (19, 12), (20, 12), (21, 13), (22, 12)], 'incorrect avgDailyReqPerHostDF'\nassert avg_daily_req_per_host_df.is_cached == True, 'incorrect avg_daily_req_per_host_df.is_cached'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:06 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160718-213035_1175278862","result":{"code":"SUCCESS","type":"TEXT","msg":"[(1, 13), (3, 12), (4, 14), (5, 12), (6, 12), (7, 13), (8, 13), (9, 14), (10, 13), (11, 14), (12, 13), (13, 13), (14, 13), (15, 13), (16, 13), (17, 13), (18, 13), (19, 12), (20, 12), (21, 13), (22, 12)]\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:38 PM","dateFinished":"Sep 14, 2016 10:27:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:353"},{"text":"%md\n\nLet's graph the results.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:06 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160723-180952_412359229","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Let's graph the results.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:06 PM","dateFinished":"Sep 14, 2016 10:26:06 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:354"},{"text":"%pyspark\n\navg_daily_req_per_host_df.registerTempTable(\"req_per_host\")\nprint avg_daily_req_per_host_df.count()\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:06 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160723-181052_1847519247","result":{"code":"SUCCESS","type":"TEXT","msg":"21\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:38 PM","dateFinished":"Sep 14, 2016 10:27:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:355"},{"text":"%sql\n\nselect day, avg_reqs_per_host_per_day from req_per_host","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:07 PM","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"day","index":0,"aggr":"sum"}],"values":[{"name":"avg_reqs_per_host_per_day","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"day","index":0,"aggr":"sum"},"yAxis":{"name":"avg_reqs_per_host_per_day","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160723-181013_89516033","result":{"code":"SUCCESS","type":"TABLE","msg":"day\tavg_reqs_per_host_per_day\n1\t13.166537567776917\n3\t12.845127250155183\n4\t14.213365155131266\n5\t12.745003996802557\n6\t12.777296018919984\n7\t13.968582562104238\n8\t13.650022696323196\n9\t14.00440120454019\n10\t13.540791510059695\n11\t14.091578462954441\n12\t13.292597765363128\n13\t13.766037735849057\n14\t13.442523574315222\n15\t13.964167062173706\n16\t13.053225806451612\n17\t13.450399087799315\n18\t13.494241842610364\n19\t12.585098039215687\n20\t12.876171875\n21\t13.434687953555878\n22\t12.961849192100539\n","comment":"","msgTable":[[{"key":"avg_reqs_per_host_per_day","value":"1"},{"key":"avg_reqs_per_host_per_day","value":"13.166537567776917"}],[{"value":"3"},{"value":"12.845127250155183"}],[{"value":"4"},{"value":"14.213365155131266"}],[{"value":"5"},{"value":"12.745003996802557"}],[{"value":"6"},{"value":"12.777296018919984"}],[{"value":"7"},{"value":"13.968582562104238"}],[{"value":"8"},{"value":"13.650022696323196"}],[{"value":"9"},{"value":"14.00440120454019"}],[{"value":"10"},{"value":"13.540791510059695"}],[{"value":"11"},{"value":"14.091578462954441"}],[{"value":"12"},{"value":"13.292597765363128"}],[{"value":"13"},{"value":"13.766037735849057"}],[{"value":"14"},{"value":"13.442523574315222"}],[{"value":"15"},{"value":"13.964167062173706"}],[{"value":"16"},{"value":"13.053225806451612"}],[{"value":"17"},{"value":"13.450399087799315"}],[{"value":"18"},{"value":"13.494241842610364"}],[{"value":"19"},{"value":"12.585098039215687"}],[{"value":"20"},{"value":"12.876171875"}],[{"value":"21"},{"value":"13.434687953555878"}],[{"value":"22"},{"value":"12.961849192100539"}]],"columnNames":[{"name":"day","index":0,"aggr":"sum"},{"name":"avg_reqs_per_host_per_day","index":1,"aggr":"sum"}],"rows":[["1","13.166537567776917"],["3","12.845127250155183"],["4","14.213365155131266"],["5","12.745003996802557"],["6","12.777296018919984"],["7","13.968582562104238"],["8","13.650022696323196"],["9","14.00440120454019"],["10","13.540791510059695"],["11","14.091578462954441"],["12","13.292597765363128"],["13","13.766037735849057"],["14","13.442523574315222"],["15","13.964167062173706"],["16","13.053225806451612"],["17","13.450399087799315"],["18","13.494241842610364"],["19","12.585098039215687"],["20","12.876171875"],["21","13.434687953555878"],["22","12.961849192100539"]]},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:38 PM","dateFinished":"Sep 14, 2016 10:27:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:356"},{"text":"%pyspark\n\ndays_with_avg = []\navgs = []\nfor day, avg in avg_daily_req_per_host_df.collect():\n  days_with_avg.append(day)\n  avgs.append(avg)\n\nprint(days_with_avg)\nprint(avgs)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:07 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160718-213303_164194322","result":{"code":"SUCCESS","type":"TEXT","msg":"[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n[13.166537567776917, 12.845127250155183, 14.213365155131266, 12.745003996802557, 12.777296018919984, 13.968582562104238, 13.650022696323196, 14.00440120454019, 13.540791510059695, 14.091578462954441, 13.292597765363128, 13.766037735849057, 13.442523574315222, 13.964167062173706, 13.053225806451612, 13.450399087799315, 13.494241842610364, 12.585098039215687, 12.876171875, 13.434687953555878, 12.961849192100539]\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:38 PM","dateFinished":"Sep 14, 2016 10:27:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:357"},{"text":"%pyspark\n\nassert days_with_avg == [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 'incorrect days'\nassert [int(a) for a in avgs] == [13, 12, 14, 12, 12, 13, 13, 14, 13, 14, 13, 13, 13, 13, 13, 13, 13, 12, 12, 13, 12], 'incorrect avgs'","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:08 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160718-213414_1518372465","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:38 PM","dateFinished":"Sep 14, 2016 10:27:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:358"},{"text":"%md\n\n## Part 5: Exploring 404 Status Codes\n\nLet's drill down and explore the error 404 status records. We've all seen those \"404 Not Found\" web pages. 404 errors are returned when the server cannot find the resource (page or object) the browser or client requested.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:08 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160723-181412_1191063726","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Part 5: Exploring 404 Status Codes</h2>\n<p>Let's drill down and explore the error 404 status records. We've all seen those &ldquo;404 Not Found&rdquo; web pages. 404 errors are returned when the server cannot find the resource (page or object) the browser or client requested.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:08 PM","dateFinished":"Sep 14, 2016 10:26:08 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:359"},{"text":"%md\n\n### (5a) Exercise: Counting 404 Response Codes\n\nCreate a DataFrame containing only log records with a 404 status code. Make sure you `cache()` the `not_found_df` as we will use it in the rest of this exercise.\n\nHow many 404 records are in the log?","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:08 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997761_1159144987","id":"20160723-181654_2080362007","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(5a) Exercise: Counting 404 Response Codes</h3>\n<p>Create a DataFrame containing only log records with a 404 status code. Make sure you <code>cache()</code> the <code>not_found_df</code> as we will use it in the rest of this exercise.</p>\n<p>How many 404 records are in the log?</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:09 PM","dateFinished":"Sep 14, 2016 10:26:09 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:360"},{"text":"%pyspark\n\nprint logs_df.columns\nprint logs_df.dtypes","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:09 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997762_1160299234","id":"20160718-213712_1105242829","result":{"code":"SUCCESS","type":"TEXT","msg":"['host', 'path', 'status', 'content_size', 'time']\n[('host', 'string'), ('path', 'string'), ('status', 'int'), ('content_size', 'int'), ('time', 'timestamp')]\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:39 PM","dateFinished":"Sep 14, 2016 10:27:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:361"},{"text":"%pyspark\n\nfrom pyspark.sql.types import IntegerType\n\nnot_found_df = logs_df.select('*').filter(logs_df['status'] == 404)\nnot_found_df.cache()\n\nprint 'Found {0} 404 URLs'.format(not_found_df.count())","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:10 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997762_1160299234","id":"20160718-213459_1837816077","result":{"code":"SUCCESS","type":"TEXT","msg":"Found 6185 404 URLs\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:39 PM","dateFinished":"Sep 14, 2016 10:27:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:362"},{"text":"%pyspark\n\nassert not_found_df.count() == 6185, 'incorrect not_found_df.count()'\nassert not_found_df.is_cached == True, 'incorrect not_found_df.is_cached'","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:11 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997762_1160299234","id":"20160718-213533_793904823","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:39 PM","dateFinished":"Sep 14, 2016 10:27:40 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:363"},{"text":"%md\n\n### (5b) Exercise: Listing 404 Status Code Records\n\nUsing the DataFrame containing only log records with a 404 status code that you cached in part (5a), print out a list up to 40 _distinct_ paths that generate 404 errors.\n\n**No path should appear more than once in your list.**","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:11 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997762_1160299234","id":"20160723-181759_431470365","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(5b) Exercise: Listing 404 Status Code Records</h3>\n<p>Using the DataFrame containing only log records with a 404 status code that you cached in part (5a), print out a list up to 40 <em>distinct</em> paths that generate 404 errors.</p>\n<p><strong>No path should appear more than once in your list.</strong></p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:11 PM","dateFinished":"Sep 14, 2016 10:26:11 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:364"},{"text":"%pyspark\n\nnot_found_paths_df = not_found_df.select('path')\nunique_not_found_paths_df = not_found_paths_df.distinct()\n\nprint '404 URLS:\\n'\nunique_not_found_paths_df.show(n=40, truncate=False)","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:11 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997762_1160299234","id":"20160718-214551_72576099","result":{"code":"SUCCESS","type":"TEXT","msg":"404 URLS:\n\n+--------------------------------------------------------------------+\n|path                                                                |\n+--------------------------------------------------------------------+\n|/history/apollo/apollo-13/apollo-13.html.                           |\n|/www/shuttle/countdown/liftoff.html                                 |\n|/shuttle/missions/sts-25/images/images.html                         |\n|/shutttle/missions/sts-70/                                          |\n|/history/discovery                                                  |\n|/html/STS66.htm                                                     |\n|/software.winvn.winvn.html                                          |\n|/images/KSCogosmall.gif                                             |\n|/news/sci.space.shuttle/archive/sci-space-shuttle-15-mar-1995-00.txt|\n|/astronaut-candidates/pub/FTPfiles/vomit-comet.postings             |\n|/history/apollo/apollo13                                            |\n|/statistics/1995/Jul/Jul95_request.gif                              |\n|/shuttle/resources/orbiters/discovery.gif                           |\n|://                                                                 |\n|/manned                                                             |\n|/128.159.104.89/tv/tv.html                                          |\n|/elv/SCOUT/elvpage.htm                                              |\n|/images/crawlerway.gif                                              |\n|/kscarea-small.gif                                                  |\n|/shuttle/mission/sts-69/countdown.html                              |\n|/history/skylab/skylab-3.gif                                        |\n|/software/winvn/winvnhtml                                           |\n|/history/apollo/a-001/movies/                                       |\n|/history/apollo/pad-abort-test-1/pad-abort-test-1-patch-small.gif   |\n|/ads/images/wsji_ad.gif                                             |\n|/statistics/Mar.wwwstats.html                                       |\n|/statistics/1995/Jul/Jul95_byte.gif                                 |\n|/kcs.html                                                           |\n|/shuttle/technology/sts-newsref/sts-jsc.html'                       |\n|/statistics/1995/Aug/Aug95_request.gif                              |\n|/.nasa.gov/shuttle/                                                 |\n|/.../liftoff.html                                                   |\n|/facilities/mil.htm/                                                |\n|/ksk.html                                                           |\n|/shuttle/missions/51-L/mission-51-l.html                            |\n|/\\\\yahoo.com                                                        |\n|/shuttle/missions/.html                                             |\n|/history/apollo/a-004/movies/                                       |\n|/history/apollo/sa-1/docs/                                          |\n|/magazine/p08aug/08pet11.gif                                        |\n+--------------------------------------------------------------------+\nonly showing top 40 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:39 PM","dateFinished":"Sep 14, 2016 10:27:43 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:365"},{"text":"%pyspark\n\nbad_unique_paths_40 = set([row[0] for row in unique_not_found_paths_df.take(40)])\n\nassert len(bad_unique_paths_40) == 40, 'bad_unique_paths_40 not distinct'","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:11 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997762_1160299234","id":"20160718-214612_397915329","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:40 PM","dateFinished":"Sep 14, 2016 10:27:41 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:366"},{"text":"%md\n\n### (5c) Exercise: Listing the Top Twenty 404 Response Code paths\n\nUsing the DataFrame containing only log records with a 404 response code that you cached in part (5a), print out a list of the top twenty paths that generate the most 404 errors.\n\n*Remember, top paths should be in sorted order*","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:12 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997762_1160299234","id":"20160723-181927_436530443","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(5c) Exercise: Listing the Top Twenty 404 Response Code paths</h3>\n<p>Using the DataFrame containing only log records with a 404 response code that you cached in part (5a), print out a list of the top twenty paths that generate the most 404 errors.</p>\n<p><em>Remember, top paths should be in sorted order</em></p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:12 PM","dateFinished":"Sep 14, 2016 10:26:12 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:367"},{"text":"%pyspark\n\ntop_20_not_found_df = not_found_paths_df.groupBy('path').count().sort('count', ascending = False)\n\nprint 'Top Twenty 404 URLs:\\n'\ntop_20_not_found_df.show(n=20, truncate=False)\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:12 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997762_1160299234","id":"20160718-214654_132253630","result":{"code":"SUCCESS","type":"TEXT","msg":"Top Twenty 404 URLs:\n\n+-----------------------------------------------------------------+-----+\n|path                                                             |count|\n+-----------------------------------------------------------------+-----+\n|/pub/winvn/readme.txt                                            |633  |\n|/pub/winvn/release.txt                                           |494  |\n|/shuttle/missions/STS-69/mission-STS-69.html                     |430  |\n|/images/nasa-logo.gif                                            |319  |\n|/elv/DELTA/uncons.htm                                            |178  |\n|/shuttle/missions/sts-68/ksc-upclose.gif                         |154  |\n|/history/apollo/sa-1/sa-1-patch-small.gif                        |146  |\n|/images/crawlerway-logo.gif                                      |120  |\n|/://spacelink.msfc.nasa.gov                                      |117  |\n|/history/apollo/pad-abort-test-1/pad-abort-test-1-patch-small.gif|100  |\n|/history/apollo/a-001/a-001-patch-small.gif                      |97   |\n|/images/Nasa-logo.gif                                            |85   |\n|                                                                 |76   |\n|/shuttle/resources/orbiters/atlantis.gif                         |63   |\n|/history/apollo/images/little-joe.jpg                            |62   |\n|/images/lf-logo.gif                                              |59   |\n|/shuttle/resources/orbiters/discovery.gif                        |56   |\n|/shuttle/resources/orbiters/challenger.gif                       |54   |\n|/robots.txt                                                      |53   |\n|/history/apollo/pad-abort-test-2/pad-abort-test-2-patch-small.gif|38   |\n+-----------------------------------------------------------------+-----+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:41 PM","dateFinished":"Sep 14, 2016 10:27:43 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:368"},{"text":"%pyspark\n\n# TEST Top twenty 404 URLs (5c)\n\ntop_20_not_found = [(row[0], row[1]) for row in top_20_not_found_df.take(20)]\ntop_20_expected = [\n (u'/pub/winvn/readme.txt', 633),\n (u'/pub/winvn/release.txt', 494),\n (u'/shuttle/missions/STS-69/mission-STS-69.html', 430),\n (u'/images/nasa-logo.gif', 319),\n (u'/elv/DELTA/uncons.htm', 178),\n (u'/shuttle/missions/sts-68/ksc-upclose.gif', 154),\n (u'/history/apollo/sa-1/sa-1-patch-small.gif', 146),\n (u'/images/crawlerway-logo.gif', 120),\n (u'/://spacelink.msfc.nasa.gov', 117),\n (u'/history/apollo/pad-abort-test-1/pad-abort-test-1-patch-small.gif', 100),\n (u'/history/apollo/a-001/a-001-patch-small.gif', 97),\n (u'/images/Nasa-logo.gif', 85),\n (u'', 76),\n (u'/shuttle/resources/orbiters/atlantis.gif', 63),\n (u'/history/apollo/images/little-joe.jpg', 62),\n (u'/images/lf-logo.gif', 59),\n (u'/shuttle/resources/orbiters/discovery.gif', 56),\n (u'/shuttle/resources/orbiters/challenger.gif', 54),\n (u'/robots.txt', 53),\n (u'/history/apollo/pad-abort-test-2/pad-abort-test-2-patch-small.gif', 38)\n]\n\nassert top_20_not_found == top_20_expected, 'incorrect top_20_not_found'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:12 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997762_1160299234","id":"20160718-214713_1503319001","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:41 PM","dateFinished":"Sep 14, 2016 10:27:45 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:369"},{"text":"%md\n\n### (5d) Exercise: Listing the Top Twenty-five 404 Response Code Hosts\n\nInstead of looking at the paths that generated 404 errors, let's look at the hosts that encountered 404 errors. Using the DataFrame containing only log records with a 404 status codes that you cached in part (5a), print out a list of the top twenty-five hosts that generate the most 404 errors.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:13 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160723-182052_1374107064","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(5d) Exercise: Listing the Top Twenty-five 404 Response Code Hosts</h3>\n<p>Instead of looking at the paths that generated 404 errors, let's look at the hosts that encountered 404 errors. Using the DataFrame containing only log records with a 404 status codes that you cached in part (5a), print out a list of the top twenty-five hosts that generate the most 404 errors.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:13 PM","dateFinished":"Sep 14, 2016 10:26:13 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:370"},{"text":"%pyspark\n\nhosts_404_count_df = not_found_df.groupBy('host').count().sort('count', ascending=False)\n\nprint 'Top 25 hosts that generated errors:\\n'\nhosts_404_count_df.show(n=25, truncate=False)\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:13 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160718-214746_1184403987","result":{"code":"SUCCESS","type":"TEXT","msg":"Top 25 hosts that generated errors:\n\n+-----------------------------+-----+\n|host                         |count|\n+-----------------------------+-----+\n|maz3.maz.net                 |39   |\n|piweba3y.prodigy.com         |39   |\n|gate.barr.com                |38   |\n|nexus.mlckew.edu.au          |37   |\n|m38-370-9.mit.edu            |37   |\n|ts8-1.westwood.ts.ucla.edu   |37   |\n|204.62.245.32                |33   |\n|163.206.104.34               |27   |\n|spica.sci.isas.ac.jp         |27   |\n|www-d4.proxy.aol.com         |26   |\n|203.13.168.17                |25   |\n|203.13.168.24                |25   |\n|www-c4.proxy.aol.com         |25   |\n|internet-gw.watson.ibm.com   |24   |\n|crl5.crl.com                 |23   |\n|piweba5y.prodigy.com         |23   |\n|scooter.pa-x.dec.com         |23   |\n|slip145-189.ut.nl.ibm.net    |22   |\n|onramp2-9.onr.com            |22   |\n|198.40.25.102.sap2.artic.edu |21   |\n|msp1-16.nas.mr.net           |20   |\n|gn2.getnet.com               |20   |\n|isou24.vilspa.esa.es         |19   |\n|tigger.nashscene.com         |19   |\n|dial055.mbnet.mb.ca          |19   |\n+-----------------------------+-----+\nonly showing top 25 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:42 PM","dateFinished":"Sep 14, 2016 10:27:46 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:371"},{"text":"%pyspark\n\ntop_25_404 = [(row[0], row[1]) for row in hosts_404_count_df.take(25)]\nassert len(top_25_404) == 25, 'length of errHostsTop25 is not 25'\n\nexpected = set([\n  (u'maz3.maz.net ', 39),\n  (u'piweba3y.prodigy.com ', 39),\n  (u'gate.barr.com ', 38),\n  (u'nexus.mlckew.edu.au ', 37),\n  (u'ts8-1.westwood.ts.ucla.edu ', 37),\n  (u'm38-370-9.mit.edu ', 37),\n  (u'204.62.245.32 ', 33),\n  (u'spica.sci.isas.ac.jp ', 27),\n  (u'163.206.104.34 ', 27),\n  (u'www-d4.proxy.aol.com ', 26),\n  (u'203.13.168.17 ', 25),\n  (u'203.13.168.24 ', 25),\n  (u'www-c4.proxy.aol.com ', 25),\n  (u'internet-gw.watson.ibm.com ', 24),\n  (u'crl5.crl.com ', 23),\n  (u'piweba5y.prodigy.com ', 23),\n  (u'scooter.pa-x.dec.com ', 23),\n  (u'onramp2-9.onr.com ', 22),\n  (u'slip145-189.ut.nl.ibm.net ', 22),\n  (u'198.40.25.102.sap2.artic.edu ', 21),\n  (u'msp1-16.nas.mr.net ', 20),\n  (u'gn2.getnet.com ', 20),\n  (u'tigger.nashscene.com ', 19),\n  (u'dial055.mbnet.mb.ca ', 19),\n  (u'isou24.vilspa.esa.es ', 19)\n])\n\nassert (len(set(top_25_404) - expected)) == 0, 'incorrect hosts_404_count_df'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:13 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160718-214852_1529996792","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:45 PM","dateFinished":"Sep 14, 2016 10:27:47 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:372"},{"text":"%md\n\n### (5e) Exercise: Listing 404 Errors per Day\n\nLet's explore the 404 records temporally. Break down the 404 requests by day (cache the `errors_by_date_sorted_df` DataFrame) and get the daily counts sorted by day in `errors_by_date_sorted_df`.\n\n*Since the log only covers a single month, you can ignore the month in your checks.*","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:14 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160723-182156_228944708","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(5e) Exercise: Listing 404 Errors per Day</h3>\n<p>Let's explore the 404 records temporally. Break down the 404 requests by day (cache the <code>errors_by_date_sorted_df</code> DataFrame) and get the daily counts sorted by day in <code>errors_by_date_sorted_df</code>.</p>\n<p><em>Since the log only covers a single month, you can ignore the month in your checks.</em></p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:14 PM","dateFinished":"Sep 14, 2016 10:26:14 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:373"},{"text":"%pyspark\n\nerrors_by_date_sorted_df = not_found_df.select(dayofmonth('time').alias('day')).groupBy('day').count()\nerrors_by_date_sorted_df.cache()\n\nprint '404 Errors by day:\\n'\nerrors_by_date_sorted_df.show(100)\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:14 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160718-214955_1574089020","result":{"code":"SUCCESS","type":"TEXT","msg":"404 Errors by day:\n\n+---+-----+\n|day|count|\n+---+-----+\n|  1|  243|\n|  3|  303|\n|  4|  346|\n|  5|  234|\n|  6|  372|\n|  7|  532|\n|  8|  381|\n|  9|  279|\n| 10|  314|\n| 11|  263|\n| 12|  195|\n| 13|  216|\n| 14|  287|\n| 15|  326|\n| 16|  258|\n| 17|  269|\n| 18|  255|\n| 19|  207|\n| 20|  312|\n| 21|  305|\n| 22|  288|\n+---+-----+\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:45 PM","dateFinished":"Sep 14, 2016 10:27:48 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:374"},{"text":"%pyspark\n\nerrors_by_date = [(row[0], row[1]) for row in errors_by_date_sorted_df.collect()]\nexpected = [\n  (1, 243),\n  (3, 303),\n  (4, 346),\n  (5, 234),\n  (6, 372),\n  (7, 532),\n  (8, 381),\n  (9, 279),\n  (10, 314),\n  (11, 263),\n  (12, 195),\n  (13, 216),\n  (14, 287),\n  (15, 326),\n  (16, 258),\n  (17, 269),\n  (18, 255),\n  (19, 207),\n  (20, 312),\n  (21, 305),\n  (22, 288)\n]\n\nassert errors_by_date == expected, 'incorrect errors_by_date_sorted_df'\nassert errors_by_date_sorted_df.is_cached == True, 'incorrect errors_by_date_sorted_df.is_cached'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:14 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160718-215047_1970799170","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:48 PM","dateFinished":"Sep 14, 2016 10:27:49 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:375"},{"text":"%md\n\n### (5f) Exercise: Visualizing the 404 Errors by Day\n\nUsing the results from the previous exercise, use `matplotlib` to plot a line or bar graph of the 404 response codes by day.\n\n**Hint**: You'll need to use the same technique you used in (4f).","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:15 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160723-182256_1591901297","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(5f) Exercise: Visualizing the 404 Errors by Day</h3>\n<p>Using the results from the previous exercise, use <code>matplotlib</code> to plot a line or bar graph of the 404 response codes by day.</p>\n<p><strong>Hint</strong>: You'll need to use the same technique you used in (4f).</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:15 PM","dateFinished":"Sep 14, 2016 10:26:15 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:376"},{"text":"%pyspark\n\ndays_with_errors_404 = []\nerrors_404_by_day = []\nfor day, count in errors_by_date_sorted_df.collect():\n  days_with_errors_404.append(day)\n  errors_404_by_day.append(count)\n\nprint days_with_errors_404\nprint errors_404_by_day\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:15 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160718-215131_1647614447","result":{"code":"SUCCESS","type":"TEXT","msg":"[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n[243, 303, 346, 234, 372, 532, 381, 279, 314, 263, 195, 216, 287, 326, 258, 269, 255, 207, 312, 305, 288]\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:48 PM","dateFinished":"Sep 14, 2016 10:27:49 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:377"},{"text":"%pyspark\n\nassert days_with_errors_404 == [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 'incorrect days_with_errors_404'\nassert errors_404_by_day == [243, 303, 346, 234, 372, 532, 381, 279, 314, 263, 195, 216, 287, 326, 258, 269, 255, 207, 312, 305, 288], 'incorrect errors_404_by_day'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:15 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160718-215153_252344212","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:49 PM","dateFinished":"Sep 14, 2016 10:27:49 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:378"},{"text":"%pyspark\n\nerrors_by_date_sorted_df.show()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:16 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160718-215231_338454169","result":{"code":"SUCCESS","type":"TEXT","msg":"+---+-----+\n|day|count|\n+---+-----+\n|  1|  243|\n|  3|  303|\n|  4|  346|\n|  5|  234|\n|  6|  372|\n|  7|  532|\n|  8|  381|\n|  9|  279|\n| 10|  314|\n| 11|  263|\n| 12|  195|\n| 13|  216|\n| 14|  287|\n| 15|  326|\n| 16|  258|\n| 17|  269|\n| 18|  255|\n| 19|  207|\n| 20|  312|\n| 21|  305|\n+---+-----+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:49 PM","dateFinished":"Sep 14, 2016 10:27:51 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:379"},{"text":"%md\n\n### (5g) Exercise: Top Five Days for 404 Errors\n\nUsing the DataFrame `errors_by_date_sorted_df` you cached in the part (5e), what are the top five days for 404 errors and the corresponding counts of 404 errors?","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:16 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997763_1159914485","id":"20160723-182518_1865837020","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(5g) Exercise: Top Five Days for 404 Errors</h3>\n<p>Using the DataFrame <code>errors_by_date_sorted_df</code> you cached in the part (5e), what are the top five days for 404 errors and the corresponding counts of 404 errors?</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:16 PM","dateFinished":"Sep 14, 2016 10:26:16 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:380"},{"text":"%pyspark\n\ntop_err_date_df = errors_by_date_sorted_df.sort('count', ascending=False)\n\nprint 'Top Five Dates for 404 Requests:\\n'\ntop_err_date_df.show(5)\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:16 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160718-215258_1747355705","result":{"code":"SUCCESS","type":"TEXT","msg":"Top Five Dates for 404 Requests:\n\n+---+-----+\n|day|count|\n+---+-----+\n|  7|  532|\n|  8|  381|\n|  6|  372|\n|  4|  346|\n| 15|  326|\n+---+-----+\nonly showing top 5 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:49 PM","dateFinished":"Sep 14, 2016 10:27:51 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:381"},{"text":"%pyspark\n\nassert [(r[0], r[1]) for r in top_err_date_df.take(5)] == [(7, 532), (8, 381), (6, 372), (4, 346), (15, 326)], 'incorrect top_err_date_df'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:16 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160718-215317_1076899705","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:50 PM","dateFinished":"Sep 14, 2016 10:27:52 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:382"},{"text":"%md\n\n### (5h) Exercise: Hourly 404 Errors\n\nUsing the DataFrame `not_found_df` you cached in the part (5a) and sorting by hour of the day in increasing order, create a DataFrame containing the number of requests that had a 404 return code for each hour of the day (midnight starts at 0). Cache the resulting DataFrame `hour_records_sorted_df` and print that as a list.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:17 PM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160723-182558_1177349648","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(5h) Exercise: Hourly 404 Errors</h3>\n<p>Using the DataFrame <code>not_found_df</code> you cached in the part (5a) and sorting by hour of the day in increasing order, create a DataFrame containing the number of requests that had a 404 return code for each hour of the day (midnight starts at 0). Cache the resulting DataFrame <code>hour_records_sorted_df</code> and print that as a list.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:17 PM","dateFinished":"Sep 14, 2016 10:26:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:383"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import hour\n\nhour_records_sorted_df = not_found_df.select(hour('time').alias('hour')).groupBy('hour').count()\nhour_records_sorted_df.cache()\n\nprint 'Top hours for 404 requests:\\n'\nhour_records_sorted_df.show(24)\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:17 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160718-215357_990768188","result":{"code":"SUCCESS","type":"TEXT","msg":"Top hours for 404 requests:\n\n+----+-----+\n|hour|count|\n+----+-----+\n|   0|  175|\n|   1|  171|\n|   2|  422|\n|   3|  272|\n|   4|  102|\n|   5|   95|\n|   6|   93|\n|   7|  122|\n|   8|  199|\n|   9|  185|\n|  10|  329|\n|  11|  263|\n|  12|  438|\n|  13|  397|\n|  14|  318|\n|  15|  347|\n|  16|  373|\n|  17|  330|\n|  18|  268|\n|  19|  269|\n|  20|  270|\n|  21|  241|\n|  22|  234|\n|  23|  272|\n+----+-----+\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:50 PM","dateFinished":"Sep 14, 2016 10:27:52 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:384"},{"text":"%pyspark\n\nerrs_by_hour = [(row[0], row[1]) for row in hour_records_sorted_df.collect()]\n\nexpected = [\n  (0, 175),\n  (1, 171),\n  (2, 422),\n  (3, 272),\n  (4, 102),\n  (5, 95),\n  (6, 93),\n  (7, 122),\n  (8, 199),\n  (9, 185),\n  (10, 329),\n  (11, 263),\n  (12, 438),\n  (13, 397),\n  (14, 318),\n  (15, 347),\n  (16, 373),\n  (17, 330),\n  (18, 268),\n  (19, 269),\n  (20, 270),\n  (21, 241),\n  (22, 234),\n  (23, 272)\n]\n\nassert errs_by_hour == expected, 'incorrect errs_by_hour'\nassert hour_records_sorted_df.is_cached == True, 'incorrect hour_records_sorted_df.is_cached'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:17 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160718-215425_1194811262","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:51 PM","dateFinished":"Sep 14, 2016 10:27:52 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:385"},{"text":"%md\n\n### (5i) Exercise: Visualizing the 404 Response Codes by Hour\n\nUsing the results from the previous exercise, plot a line or bar graph of the 404 response codes by hour.","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:18 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160723-182645_1328282364","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>(5i) Exercise: Visualizing the 404 Response Codes by Hour</h3>\n<p>Using the results from the previous exercise, plot a line or bar graph of the 404 response codes by hour.</p>\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:26:18 PM","dateFinished":"Sep 14, 2016 10:26:18 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:386"},{"text":"%pyspark\n\nhours_with_not_found = hour_records_sorted_df.select('hour').map(lambda row: row[0]).collect()\nnot_found_counts_per_hour = hour_records_sorted_df.select('count').map(lambda row: row[0]).collect()\n\nprint hours_with_not_found\nprint not_found_counts_per_hour\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:18 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160718-215511_1439506524","result":{"code":"SUCCESS","type":"TEXT","msg":"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n[175, 171, 422, 272, 102, 95, 93, 122, 199, 185, 329, 263, 438, 397, 318, 347, 373, 330, 268, 269, 270, 241, 234, 272]\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:52 PM","dateFinished":"Sep 14, 2016 10:27:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:387"},{"text":"%pyspark\n\nassert hours_with_not_found == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 'incorrect hours_with_not_found'\nassert not_found_counts_per_hour == [175, 171, 422, 272, 102, 95, 93, 122, 199, 185, 329, 263, 438, 397, 318, 347, 373, 330, 268, 269, 270, 241, 234, 272], 'incorrect not_found_counts_per_hour'\n","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:19 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160718-215528_1196284276","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:52 PM","dateFinished":"Sep 14, 2016 10:27:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:388"},{"text":"%pyspark\n\nhour_records_sorted_df.show()","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:19 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160718-215604_634878316","result":{"code":"SUCCESS","type":"TEXT","msg":"+----+-----+\n|hour|count|\n+----+-----+\n|   0|  175|\n|   1|  171|\n|   2|  422|\n|   3|  272|\n|   4|  102|\n|   5|   95|\n|   6|   93|\n|   7|  122|\n|   8|  199|\n|   9|  185|\n|  10|  329|\n|  11|  263|\n|  12|  438|\n|  13|  397|\n|  14|  318|\n|  15|  347|\n|  16|  373|\n|  17|  330|\n|  18|  268|\n|  19|  269|\n+----+-----+\nonly showing top 20 rows\n\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:57 PM","dateFinished":"Sep 14, 2016 10:27:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:389"},{"text":"%pyspark\n\nprint 'This was last run on: {0}'.format(datetime.datetime.now())","authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:20 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160718-215627_361302355","result":{"code":"SUCCESS","type":"TEXT","msg":"This was last run on: 2016-09-14 22:27:58.162795\n"},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:58 PM","dateFinished":"Sep 14, 2016 10:27:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:390"},{"authenticationInfo":{},"dateUpdated":"Sep 14, 2016 10:26:20 PM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473780997764_1157990741","id":"20160718-215658_906219167","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Sep 13, 2016 3:36:37 PM","dateStarted":"Sep 14, 2016 10:27:58 PM","dateFinished":"Sep 14, 2016 10:27:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:391"}],"name":"Workshop: Analyzing Web Logs","id":"2BXSE1MV8","angularObjects":{"2BVEP6ZKY":[],"2BWZB388X":[],"2BXX8SENF":[],"2BUQ9M1GJ":[],"2BVA3RTBS":[],"2BVN48HTU":[],"2BWT845PF":[],"2BUCH3WSQ":[],"2BXRCWS69":[],"2BX42WEQW":[],"2BVPM4FZQ":[],"2BV8HV3E3":[],"2BWWTN716":[],"2BX3GR4YN":[],"2BWRCQX1M":[],"2BW7X3PPY":[],"2BUUKDK3H":[],"2BWXUVQ91":[],"2BWPTGUTK":[]},"config":{"looknfeel":"default"},"info":{}}